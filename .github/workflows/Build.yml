name: Build on platforms
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
jobs:
  arch_in_container:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/greyltc-org/archlinux-aur:yay
    steps:
      - uses: actions/checkout@v1
      - name: Build on arch
        run: |
          aur-install swift-bin
          pacman -S zip git --noconfirm
          ./scripts/ci_create_zip.sh ArchLinux
      - uses: actions/upload-artifact@v3
        with:
          name: ArchLinux.zip
          path: /ArchLinux.zip
  fedora_in_container:
    strategy:
      matrix:
        version: [37, 38, 39]
    runs-on: ubuntu-latest
    container:
      image: fedora:${{ matrix.version }}
    steps:
      - uses: actions/checkout@v1
      - name: Build on Fedora ${{ matrix.version }}
        run: |
          sudo dnf install zip swift-lang git libstdc++-static -y
          sudo dnf clean all
          ./scripts/ci_create_zip.sh Fedora${{ matrix.version }}
      - uses: actions/upload-artifact@v3
        with:
          name: Fedora${{ matrix.version }}.zip
          path: /Fedora${{ matrix.version }}.zip
  macos:
    strategy:
      matrix:
        version: [12, 13]
    runs-on: macos-${{ matrix.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Build on MacOS ${{ matrix.version }}
        run: |
          swift build
          swift test
          ./.build/debug/Swift-MesonLSP --test TestCases/BasicTests/meson.build
          ./.build/debug/Swift-MesonLSP --test TestCases/Options/meson.build
          ./.build/debug/Swift-MesonLSP --test TestCases/ComputeSubdirs/meson.build
          ./.build/debug/Swift-MesonLSP --test TestCases/ComputeSetVariable/meson.build
          ./scripts/do_meson_tests.sh
          ./scripts/run_regression_tests.sh
          yes | brew install mercurial
          yes | brew install subversion || true
          ./scripts/run_wrap_tests.sh
          swift build -c release --arch x86_64 --arch arm64
          mkdir -p ${{ github.workspace }}/Artifacts
          sudo cp .build/release/Swift-MesonLSP ${{ github.workspace }}/Artifacts/Swift-MesonLSP
      - uses: actions/upload-artifact@v3
        with:
          name: MacOS${{ matrix.version }}.zip
          path: ${{ github.workspace }}/Artifacts
  ubuntu_in_container:
    strategy:
      matrix:
        version: ["18.04", "20.04", "22.04"]
    runs-on: ubuntu-latest
    container:
      image: ubuntu:${{ matrix.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Build on Ubuntu ${{ matrix.version }}
        shell: bash
        run: |
          apt install lsb-release -y|| true
          apt install lsb-core -y || true
          ./scripts/ci_ubuntu_install.sh
          pushd /
          wget --progress=dot:giga https://download.swift.org/swift-5.9-release/ubuntu$(echo ${{ matrix.version }}|sed s/\\.//g)/swift-5.9-RELEASE/swift-5.9-RELEASE-ubuntu${{ matrix.version }}.tar.gz
          tar xzvf swift-5.9-RELEASE-ubuntu${{ matrix.version }}.tar.gz
          rm -f swift-5.9-RELEASE-ubuntu${{ matrix.version }}.tar.gz
          export PATH=$PATH:/swift-5.9-RELEASE-ubuntu${{ matrix.version }}/usr/bin
          popd
          swift --version
          ./scripts/ci_create_zip.sh Ubuntu${{ matrix.version }}
      - uses: actions/upload-artifact@v3
        with:
          name: Ubuntu${{ matrix.version }}.zip
          path: /Ubuntu${{ matrix.version }}.zip
  matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          TASKS=$(echo $(cat .github/workflows/debian_matrix.json) | sed 's/ //g' )
          echo "::set-output name=matrix::$TASKS"
  debian:
    needs: [matrix]
    strategy:
      matrix:
        cfg: ${{ fromJson(needs.matrix.outputs.matrix) }}
    runs-on: ubuntu-22.04
    container:
      image: debian:${{ matrix.cfg.image }}
    steps:
      - uses: actions/checkout@v3
      - name: Build on Debian ${{ matrix.cfg.name }}
        shell: bash
        run: |
          apt-get update -y
          apt-get install -y zip git sqlite3 libncurses6 libxml2 libcurl4-openssl-dev sudo gcc g++ binutils wget
          pushd /
          wget https://download.swift.org/swift-5.9-release/ubuntu2004/swift-5.9-RELEASE/swift-5.9-RELEASE-ubuntu20.04.tar.gz
          tar xvf swift-5.9-RELEASE-ubuntu20.04.tar.gz
          popd
          /swift-5.9-RELEASE-ubuntu20.04/usr/bin/swift build -c release --static-swift-stdlib
          cp .build/release/Swift-MesonLSP .
          zip -9 Debian-${{ matrix.cfg.name }}.zip Swift-MesonLSP
          sudo cp Debian-${{ matrix.cfg.name }}.zip /
      - uses: actions/upload-artifact@v3
        with:
          name: Debian-${{ matrix.cfg.name }}.zip
          path: /Debian-${{ matrix.cfg.name }}.zip
  tests:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: swift build
      - name: Run tests
        run: swift test
      - name: Run integration tests
        run: |
          sudo apt install -y mercurial
          swift build
          ./.build/debug/Swift-MesonLSP --test TestCases/BasicTests/meson.build
          ./.build/debug/Swift-MesonLSP --test TestCases/Options/meson.build
          ./.build/debug/Swift-MesonLSP --test TestCases/ComputeSubdirs/meson.build
          ./.build/debug/Swift-MesonLSP --test TestCases/ComputeSetVariable/meson.build
          ./scripts/do_meson_tests.sh
          ./scripts/run_wrap_tests.sh
          git clone https://github.com/mesonbuild/wrapdb
          mkdir wo
          for i in wrapdb/subprojects/*.wrap; do .build/debug/Swift-MesonLSP --wrap $i --wrap-package-files "./wrapdb/subprojects/packagefiles" --wrap-output ./wo/ || exit 1; done
  regressiontests:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Run regression tests
        run: |
          swift build -c release --static-swift-stdlib
          ./scripts/run_regression_tests.sh
  build-debs-ubuntu:
    needs: ubuntu_in_container
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: Ubuntu18.04.zip
          path: out
      - uses: actions/download-artifact@v3
        with:
          name: Ubuntu20.04.zip
          path: out1
      - uses: actions/download-artifact@v3
        with:
          name: Ubuntu22.04.zip
          path: out2
      - name: Build deb files
        run: |
          sudo apt-get -y install dpkg
          find out out1 out2
          cd out
          unzip Ubuntu18.04.zip
          cd ../out1
          unzip Ubuntu20.04.zip
          cd ../out2
          unzip Ubuntu22.04.zip
          cd ..
          sudo ./.debian/build_debs_ubuntu.sh
      - uses: actions/upload-artifact@v3
        with:
          name: Swift-MesonLSP-ubuntu-18.04.deb
          path: /Swift-MesonLSP-ubuntu-18.04.deb
      - uses: actions/upload-artifact@v3
        with:
          name: Swift-MesonLSP-ubuntu-20.04.deb
          path: /Swift-MesonLSP-ubuntu-20.04.deb
      - uses: actions/upload-artifact@v3
        with:
          name: Swift-MesonLSP-ubuntu-22.04.deb
          path: /Swift-MesonLSP-ubuntu-22.04.deb
  build-debs-debian:
    needs: debian
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: Debian-Stable.zip
          path: out
      - uses: actions/download-artifact@v3
        with:
          name: Debian-Testing.zip
          path: out1
      - uses: actions/download-artifact@v3
        with:
          name: Debian-Unstable.zip
          path: out2
      - name: Build deb files
        run: |
          sudo apt-get -y install dpkg
          find out out1 out2
          cd out
          unzip Debian-Stable.zip
          cd ../out1
          unzip Debian-Testing.zip
          cd ../out2
          unzip Debian-Unstable.zip
          cd ..
          sudo ./.debian/build_debs_debian.sh
      - uses: actions/upload-artifact@v3
        with:
          name: Swift-MesonLSP-debian-stable.deb
          path: /Swift-MesonLSP-debian-stable.deb
      - uses: actions/upload-artifact@v3
        with:
          name: Swift-MesonLSP-debian-testing.deb
          path: /Swift-MesonLSP-debian-testing.deb
      - uses: actions/upload-artifact@v3
        with:
          name: Swift-MesonLSP-debian-unstable.deb
          path: /Swift-MesonLSP-debian-unstable.deb
