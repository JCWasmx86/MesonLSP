name: Build on platforms
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
jobs:
  debian:
    strategy:
      matrix:
        version: ["trixie", "sid"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Build on Debian ${{ matrix.version }}
        run: |
          sudo apt purge -y podman
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/xUbuntu_$(lsb_release -rs)/Release.key | gpg --dearmor | sudo tee /etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg > /dev/null
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg] https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/xUbuntu_$(lsb_release -rs)/ /" sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list > /dev/null
          sudo apt-get update
          sudo apt-get -y install podman
          podman --version
          DOCKER_BUILDKIT=1 docker build --network=host --file docker/Dockerfile.debian${{ matrix.version }} --output out .
          sudo cp out/mesonlsp-debian-static.zip /mesonlsp-debian-${{ matrix.version }}.zip
      - uses: actions/upload-artifact@v3
        with:
          name: mesonlsp-debian-${{ matrix.version }}.zip
          path: /mesonlsp-debian-${{ matrix.version }}.zip
  alpine:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Build on Alpine
        run: |
          sudo apt purge -y podman
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/xUbuntu_$(lsb_release -rs)/Release.key | gpg --dearmor | sudo tee /etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg > /dev/null
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg] https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/xUbuntu_$(lsb_release -rs)/ /" sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list > /dev/null
          sudo apt-get update
          sudo apt-get -y install podman
          podman --version
          DOCKER_BUILDKIT=1 docker build --network=host --file Dockerfile --output out .
          sudo cp out/mesonlsp-alpine-static.zip /mesonlsp-alpine-static.zip
      - uses: actions/upload-artifact@v3
        with:
          name: mesonlsp-alpine-static.zip
          path: /mesonlsp-alpine-static.zip
  windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v1
      - uses: msys2/setup-msys2@v2
        with:
          cache: true
          path-type: inherit
          msystem: MINGW64
          pacboy: >-
            gcc:p
            curl:p
            libarchive:p
            meson:p
            ninja:p
            crt:p
            pkgconf:p
            dlfcn:p
            libunwind:p
            python:p
            python-pip:p
      - name: Build on Windows
        run: |
          svn --version || echo "No SVN"
          hg --version || echo "No mercurial"
          svn checkout -r HEAD --non-interactive --trust-server-cert-failures=unknown-ca,cn-mismatch,expired,not-yet-valid,other https://svn.xiph.org/trunk/vorbis/ ./out
          meson setup _build
          du -b ./tests/integration/workspace-test/meson.build ./tests/integration/workspace-test/subdir/meson.build
          ninja -C _build
          meson test -C _build -v -j 1
  macos:
    strategy:
      matrix:
        version: [13, 14]
    runs-on: macos-${{ matrix.version }}
    steps:
      - uses: actions/checkout@v1
      - name: Build on macOS ${{ matrix.version }}
        run: |
          brew unlink pkg-config
          brew link --overwrite python@3.12 || true
          brew install zip google-benchmark libarchive pkg-config pkgconf fmt zstd bzip2 libiconv expat xz lz4 zlib subversion mercurial || true
          svn --version
          hg --version
          python3 -m pip install meson ninja
          mkdir libs
          sudo cp $(brew --prefix)/opt/{libarchive,zstd,zlib,expat,xz,lz4,libb2}/lib/*.a libs
          ls libs
          export LDFLAGS="-L$PWD/libs"
          export CPPFLAGS="-I$(brew --prefix)/opt/libarchive/include -I$(brew --prefix)/opt/zstd/include -I$(brew --prefix)/opt/bzip2/include -I$(brew --prefix)/opt/expat/include -I$(brew --prefix)/opt/zlib/include -I$(brew --prefix)/opt/bzip2/include -I$(brew --prefix)/opt/expat/include -I$(brew --prefix)/opt/zlib/include"
          export PKG_CONFIG_PATH="$(brew --prefix)/opt/zstd/lib/pkgconfig:$(brew --prefix)/opt/libarchive/lib/pkgconfig:$(brew --prefix)/opt/expat/lib/pkgconfig:$(brew --prefix)/opt/zlib/lib/pkgconfig:$(brew --prefix)/opt/expat/lib/pkgconfig:$(brew --prefix)/opt/zlib/lib/pkgconfig"
          sudo rm $(brew --prefix)/opt/{libarchive,zstd,zlib,expat,xz,lz4,libb2}/lib/*.dylib || sudo rm /opt/homebrew/opt/{libarchive,zstd,zlib,expat,xz,lz4,libb2}/lib/*.dylib
          brew link --overwrite pkg-config
          export PATH="/opt/homebrew/opt/libarchive/bin:$PATH"
          meson setup _build --buildtype release -Db_lto=true --default-library=static --prefer-static
          ninja -C _build
          for i in {0..10}; do ninja -C _build test; done
          otool -L _build/src/mesonlsp
          cp _build/src/mesonlsp ${{ github.workspace }}/mesonlsp
          _build/tests/libcxathrow/cxathrowtest
      - uses: actions/upload-artifact@v3
        with:
          name: Macos${{ matrix.version }}.zip
          path: ${{ github.workspace }}/mesonlsp
  sanitizers:
    strategy:
      matrix:
        buildtype: [debug, plain, release]
        sanitizer: ["address", "undefined", "leak", "address,undefined"]
    runs-on: ubuntu-latest
    container:
      image: fedora:39
    steps:
      - uses: actions/checkout@v1
      - name: Build on Fedora 39
        run: |
          sudo dnf install libasan* libhwasan* liblsan* libtsan* libubsan* zip ninja-build gcc g++ git pip libcurl-devel google-benchmark-devel glibc-static libarchive-devel gtest gtest-devel libpkgconf-devel libuuid-devel uuid python3-pip pkgconf-pkg-config mercurial subversion -y
          pip install meson
          sudo dnf clean all
          meson setup _clang --buildtype ${{ matrix.buildtype }} -Db_sanitize=${{ matrix.sanitizer }}
          cd _clang
          ninja
          meson test "mesonlsp:" || cat /__w/Swift-MesonLSP/Swift-MesonLSP/_clang/meson-logs/testlog.txt
          cd ..
          ./scripts/run_regression_tests.sh
          for i in $(find __regressions|grep meson.build$|shuf|head -n 90); do echo $i; ./_clang/src/libparsing/lexingtool $i 2>/dev/null || ./_clang/src/libparsing/lexingtool $i; done
          for i in $(find __regressions|grep meson.build$|shuf|head -n 90); do echo $i; ./_clang/src/libparsing/parsingtool $i 2>/dev/null || ./_clang/src/libparsing/parsingtool $i; done
  fedora_in_container:
    strategy:
      matrix:
        version: [39, 40]
    runs-on: ubuntu-latest
    container:
      image: fedora:${{ matrix.version }}
    steps:
      - uses: actions/checkout@v1
      - name: Build on Fedora ${{ matrix.version }}
        run: |
          sudo dnf install zip ninja-build gcc g++ git pip libcurl-devel google-benchmark-devel glibc-static libarchive-devel gtest gtest-devel libpkgconf-devel libuuid-devel uuid python3-pip pkgconf-pkg-config mercurial subversion -y
          pip install meson
          sudo dnf clean all
          ./scripts/ci_create_zip.sh Fedora${{ matrix.version }}
      - uses: actions/upload-artifact@v3
        with:
          name: Fedora${{ matrix.version }}.zip
          path: /Fedora${{ matrix.version }}.zip
  fedora_in_container_clang:
    strategy:
      matrix:
        version: [39, 40]
    runs-on: ubuntu-latest
    container:
      image: fedora:${{ matrix.version }}
    steps:
      - uses: actions/checkout@v1
      - name: Build on Fedora ${{ matrix.version }}
        run: |
          sudo dnf install zip ninja-build clang gcc g++ git pip libcurl-devel google-benchmark-devel glibc-static libarchive-devel gtest gtest-devel libpkgconf-devel libuuid-devel uuid python3-pip pkgconf-pkg-config mercurial subversion -y
          pip install meson
          sudo dnf clean all
          export CC=clang
          export CXX=clang++
          ./scripts/ci_create_zip.sh Fedora${{ matrix.version }}
      - uses: actions/upload-artifact@v3
        with:
          name: Fedora${{ matrix.version }}-clang.zip
          path: /Fedora${{ matrix.version }}-clang.zip
