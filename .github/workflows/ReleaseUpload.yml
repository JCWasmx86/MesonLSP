name: Release-Upload

on:
  release:
  workflow_dispatch:

jobs:
  build-ubuntu:
    name: Build and upload
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: |
          swift build -c release --static-swift-stdlib
          ./scripts/create_license_bundle.sh
          zip -9jpr Swift-MesonLSP.zip .build/release/Swift-MesonLSP 3rdparty.txt COPYING
      - name: Upload to release
        uses: xresloader/upload-to-github-release@main
        with:
          file: Swift-MesonLSP.zip
          verbose: true
          update_latest_release: true
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v3
        with:
          name: Swift-MesonLSP.zip
          path: Swift-MesonLSP.zip
  build-macos:
    strategy:
      matrix:
        version: [12, 13]
    name: Build and upload macOS ${{ matrix.version }}
    runs-on: macos-${{ matrix.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: |
          swift build -c release --arch x86_64 --arch arm64
          ./scripts/create_license_bundle.sh
          zip -9jpr Swift-MesonLSP-macos${{ matrix.version }}.zip .build/apple/Products/Release/Swift-MesonLSP 3rdparty.txt COPYING
      - name: Upload to release
        uses: xresloader/upload-to-github-release@main
        with:
          file: Swift-MesonLSP-macos${{ matrix.version }}.zip
          verbose: true
          update_latest_release: true
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v3
        with:
          name: Swift-MesonLSP-macos${{ matrix.version }}.zip
          path: Swift-MesonLSP-macos${{ matrix.version }}.zip
  aur-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Update AUR package
        uses: JCWasmx86/update-aur-package@master
        with:
          package_name: swift-mesonlsp
          commit_username: "JCWasmx86"
          commit_email: JCWasmx86@t-online.de
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
  trigger-copr:
    name: Submit a COPR
    container: fedora:latest
    runs-on: ubuntu-latest
    steps:
      - name: Check out proper version of sources
        uses: actions/checkout@v1

      - name: Install API token for copr-cli
        env:
          API_TOKEN_CONTENT: ${{ secrets.COPR_API_TOKEN }}
        run: |
          mkdir -p "$HOME/.config"
          echo "$API_TOKEN_CONTENT" > "$HOME/.config/copr"

      - name: Install tooling for source RPM build
        run: |
          dnf -y install @development-tools @rpm-development-tools
          dnf -y install copr-cli make
          wget https://github.com/JCWasmx86/Swift-MesonLSP/archive/refs/tags/${GITHUB_REF_NAME}.tar.gz

      - name: Build the source RPM
        run: rpmbuild -bs Swift-MesonLSP.spec --define "_sourcedir $PWD" --define "_srcrpmdir $PWD"

      - name: Submit the build by uploading the source RPM
        run: copr build jcwasmx86/Swift-MesonLSP *.src.rpm
  matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          TASKS=$(echo $(cat .github/workflows/debian_matrix.json) | sed 's/ //g' )
          echo "::set-output name=matrix::$TASKS"
  debian:
    needs: [matrix]
    strategy:
      matrix:
        cfg: ${{ fromJson(needs.matrix.outputs.matrix) }}
    runs-on: ubuntu-22.04
    container:
      image: debian:${{ matrix.cfg.image }}
    steps:
      - uses: actions/checkout@v3
      - name: Build on Debian ${{ matrix.cfg.name }}
        shell: bash
        run: |
          apt-get update -y
          apt-get install -y zip git sqlite3 libncurses6 libxml2 libcurl4-openssl-dev sudo gcc g++ binutils wget
          pushd /
          wget https://download.swift.org/swift-5.9-release/ubuntu2004/swift-5.9-RELEASE/swift-5.9-RELEASE-ubuntu20.04.tar.gz
          tar xvf swift-5.9-RELEASE-ubuntu20.04.tar.gz
          popd
          /swift-5.9-RELEASE-ubuntu20.04/usr/bin/swift build -c release --static-swift-stdlib
          cp .build/release/Swift-MesonLSP .
          zip -9 Debian-${{ matrix.cfg.name }}.zip Swift-MesonLSP
          sudo cp Debian-${{ matrix.cfg.name }}.zip /
      - uses: actions/upload-artifact@v3
        with:
          name: Debian-${{ matrix.cfg.name }}.zip
          path: /Debian-${{ matrix.cfg.name }}.zip
  ubuntu_in_container:
    strategy:
      matrix:
        version: ["18.04", "20.04", "22.04"]
    runs-on: ubuntu-latest
    container:
      image: ubuntu:${{ matrix.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Build on Ubuntu ${{ matrix.version }}
        shell: bash
        run: |
          apt install lsb-release -y|| true
          apt install lsb-core -y || true
          ./scripts/ci_ubuntu_install.sh
          pushd /
          wget --progress=dot:giga https://download.swift.org/swift-5.9-release/ubuntu$(echo ${{ matrix.version }}|sed s/\\.//g)/swift-5.9-RELEASE/swift-5.9-RELEASE-ubuntu${{ matrix.version }}.tar.gz
          tar xzvf swift-5.9-RELEASE-ubuntu${{ matrix.version }}.tar.gz
          rm -f swift-5.9-RELEASE-ubuntu${{ matrix.version }}.tar.gz
          export PATH=$PATH:/swift-5.9-RELEASE-ubuntu${{ matrix.version }}/usr/bin
          popd
          swift --version
          ./scripts/ci_create_zip.sh Ubuntu${{ matrix.version }}
      - uses: actions/upload-artifact@v3
        with:
          name: Ubuntu${{ matrix.version }}.zip
          path: /Ubuntu${{ matrix.version }}.zip
  build-debs-ubuntu:
    needs: ubuntu_in_container
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v4
        with:
          name: Ubuntu18.04.zip
          path: out
      - uses: actions/download-artifact@v4
        with:
          name: Ubuntu20.04.zip
          path: out1
      - uses: actions/download-artifact@v4
        with:
          name: Ubuntu22.04.zip
          path: out2
      - name: Build deb files
        run: |
          sudo apt-get -y install dpkg
          find out out1 out2
          cd out
          unzip Ubuntu18.04.zip
          cd ../out1
          unzip Ubuntu20.04.zip
          cd ../out2
          unzip Ubuntu22.04.zip
          cd ..
          sudo ./.debian/build_debs_ubuntu.sh
      - uses: actions/upload-artifact@v3
        with:
          name: Swift-MesonLSP-ubuntu-18.04.deb
          path: /Swift-MesonLSP-ubuntu-18.04.deb
      - uses: actions/upload-artifact@v3
        with:
          name: Swift-MesonLSP-ubuntu-20.04.deb
          path: /Swift-MesonLSP-ubuntu-20.04.deb
      - uses: actions/upload-artifact@v3
        with:
          name: Swift-MesonLSP-ubuntu-22.04.deb
          path: /Swift-MesonLSP-ubuntu-22.04.deb
  build-debs-debian:
    needs: ["debian"]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v4
        with:
          name: Debian-Stable.zip
          path: out
      - uses: actions/download-artifact@v4
        with:
          name: Debian-Testing.zip
          path: out1
      - uses: actions/download-artifact@v4
        with:
          name: Debian-Unstable.zip
          path: out2
      - name: Build deb files
        run: |
          sudo apt-get -y install dpkg
          find out out1 out2
          cd out
          unzip Debian-Stable.zip
          cd ../out1
          unzip Debian-Testing.zip
          cd ../out2
          unzip Debian-Unstable.zip
          cd ..
          sudo ./.debian/build_debs_debian.sh
      - uses: actions/upload-artifact@v3
        with:
          name: Swift-MesonLSP-debian-stable.deb
          path: /Swift-MesonLSP-debian-stable.deb
      - uses: actions/upload-artifact@v3
        with:
          name: Swift-MesonLSP-debian-testing.deb
          path: /Swift-MesonLSP-debian-testing.deb
      - uses: actions/upload-artifact@v3
        with:
          name: Swift-MesonLSP-debian-unstable.deb
          path: /Swift-MesonLSP-debian-unstable.deb
  update-apt-repo:
    name: Update APT repo
    needs: ["build-debs-debian", "build-debs-ubuntu"]
    runs-on: ubuntu-latest
    steps:
      - name: Check out proper version of sources
        uses: actions/checkout@v1
      - uses: actions/download-artifact@v4
        with:
          name: Swift-MesonLSP-debian-stable.deb
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: Swift-MesonLSP-debian-testing.deb
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: Swift-MesonLSP-debian-unstable.deb
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: Swift-MesonLSP-ubuntu-18.04.deb
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: Swift-MesonLSP-ubuntu-20.04.deb
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: Swift-MesonLSP-ubuntu-22.04.deb
          path: .
      - name: Build and upload deb files
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        shell: bash
        run: |
          sudo apt-get update -y
          sudo apt-get -y install podman dpkg reprepro unzip sudo || sudo apt-get -y install podman dpkg reprepro unzip
          ls
          sudo cp -v *.deb /
          git clone https://.:${{ secrets.API_TOKEN_GITHUB }}@github.com/JCWasmx86/swift-mesonlsp-apt-repo target
          cd target
          git config --global user.email "JCWasmx86@t-online.de"
          git config --global user.name "JCWasmx86"
          cd apt
          cp /*.deb .
          . update.sh
  update-vscode-meson:
    runs-on: ubuntu-latest
    needs: ["build-ubuntu", "build-macos", "windows-59"]
    steps:
      - name: Check out proper version of sources
        uses: actions/checkout@v3
      - uses: actions/download-artifact@v4
        with:
          name: Swift-MesonLSP-win64.zip
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: Swift-MesonLSP-macos12.zip
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: Swift-MesonLSP.zip
          path: .
      - name: Create JCWasmx86/vscode-meson branch
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
          GITHUB_TOKEN: ${{ secrets.API_TOKEN_GITHUB }}
        shell: bash
        run: |
          git clone https://.:${{ secrets.API_TOKEN_GITHUB }}@github.com/JCWasmx86/vscode-meson
          cd vscode-meson
          git remote add upstream https://github.com/mesonbuild/vscode-meson
          git fetch upstream
          git checkout -b bump-${{ github.ref_name }} upstream/main
          WIN64_HASH=$(sha256sum ../Swift-MesonLSP-win64.zip|awk '{print $1}')
          MACOS12_HASH=$(sha256sum ../Swift-MesonLSP-macos12.zip|awk '{print $1}')
          LINUX_HASH=$(sha256sum ../Swift-MesonLSP.zip|awk '{print $1}')
          ../scripts/release_update_vscode.py ./src/lsp/swift-mesonlsp.ts $WIN64_HASH $MACOS12_HASH $LINUX_HASH ${{ github.ref_name }} ./CHANGELOG.md
          git config --global user.email "JCWasmx86@t-online.de"
          git config --global user.name "JCWasmx86"
          git commit -a -m "Swift-MesonLSP: Bump to ${{ github.ref_name }}"
          git push --set-upstream origin bump-${{ github.ref_name }}
          gh pr create --title "Swift-MesonLSP: Bump to ${{ github.ref_name }}" --body "Automated PR created due to a release upstream!" --repo mesonbuild/vscode-meson
  windows-59:
    runs-on: windows-2019
    steps:
      - name: Enable long paths on Windows
        shell: powershell
        run: |
          Set-ItemProperty -Path "HKLM:\\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1
      - name: Get page file information
        shell: powershell
        run: |
          wmic pagefile
      - name: Configure pagefile
        uses: al-cheb/configure-pagefile-action@v1.3
        with:
          minimum-size: 3GB
          maximum-size: 8GB
          disk-root: "D:"
      - name: Get page file information again
        shell: powershell
        run: |
          wmic pagefile
      - uses: compnerd/gha-setup-swift@main
        with:
          branch: swift-5.9-release
          tag: 5.9-RELEASE
      - uses: actions/checkout@v3
      - name: Build and test
        shell: powershell
        run: |
          cd ..\..
          git clone https://github.com/JCWasmx86/Swift-MesonLSP b
          cd b
          swift build -c release -v
          $destinationFilePath = "$env:GITHUB_WORKSPACE\Artifacts"
          mkdir $destinationFilePath
          Copy-Item "C:\\Program Files\\swift\\runtime-development\\usr\\bin\\BlocksRuntime.dll" -Destination $destinationFilePath -Force
          Copy-Item "C:\\Program Files\\swift\\runtime-development\\usr\\bin\\dispatch.dll" -Destination $destinationFilePath -Force
          Copy-Item "C:\\Program Files\\swift\\runtime-development\\usr\\bin\\Foundation.dll" -Destination $destinationFilePath -Force
          Copy-Item "C:\\Program Files\\swift\\runtime-development\\usr\\bin\\swift_Concurrency.dll" -Destination $destinationFilePath -Force
          Copy-Item "C:\\Program Files\\swift\\runtime-development\\usr\\bin\\swiftCore.dll" -Destination $destinationFilePath -Force
          Copy-Item "C:\\Program Files\\swift\\runtime-development\\usr\\bin\\swiftCRT.dll" -Destination $destinationFilePath -Force
          Copy-Item "C:\\Program Files\\swift\\runtime-development\\usr\\bin\\swiftDispatch.dll" -Destination $destinationFilePath -Force
          Copy-Item "C:\\Program Files\\swift\\runtime-development\\usr\\bin\\swiftWinSDK.dll" -Destination $destinationFilePath -Force
          $sourceFilePath = ".build\release\Swift-MesonLSP.exe"
          $destinationFilePath = "$env:GITHUB_WORKSPACE\Artifacts\Swift-MesonLSP.exe"
          Copy-Item -Path $sourceFilePath -Destination $destinationFilePath -Force
      - name: Create license bundle
        shell: bash
        run: |
          ./scripts/create_license_bundle.sh || true
          cp 3rdparty.txt Artifacts || true
          cp 3rdparty.txt ${{ github.workspace }}/Artifacts || true
      - name: Zip it up
        shell: powershell
        run: |
          cd ${{ github.workspace }}/Artifacts
          $sourcePath = "${{ github.workspace }}/Artifacts"
          $zipFilePath = "${{ github.workspace }}/Swift-MesonLSP-win64.zip"
          $files = @("*.dll", "*.exe", "COPYING", "3rdparty.txt") | %{ Get-ChildItem -File $sourcePath -Filter $_ }
          Compress-Archive -Path $files.FullName -DestinationPath $zipFilePath
          cp $zipFilePath ../..
      - name: Upload to release
        uses: xresloader/upload-to-github-release@main
        with:
          file: Swift-MesonLSP-win64.zip
          verbose: true
          update_latest_release: true
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v3
        with:
          name: Swift-MesonLSP-win64.zip
          path: Swift-MesonLSP-win64.zip
