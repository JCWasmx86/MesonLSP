name: Release-Upload

on:
  release:
  workflow_dispatch:

jobs:
  build-ubuntu:
    name: Build and upload
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: |
          swift build -c release --static-swift-stdlib
          ./scripts/create_license_bundle.sh
          zip -9jpr Swift-MesonLSP.zip .build/release/Swift-MesonLSP 3rdparty.txt COPYING
      - name: Upload to release
        uses: xresloader/upload-to-github-release@main
        with:
          file: Swift-MesonLSP.zip
          verbose: true
          update_latest_release: true
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
  build-macos12:
    name: Build and upload macOS 12
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: |
          swift build -c release
          ./scripts/create_license_bundle.sh
          zip -9jpr Swift-MesonLSP-macos12.zip .build/release/Swift-MesonLSP 3rdparty.txt COPYING
      - name: Upload to release
        uses: xresloader/upload-to-github-release@main
        with:
          file: Swift-MesonLSP-macos12.zip
          verbose: true
          update_latest_release: true
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
  build-macos13:
    name: Build and upload macOS 13
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: |
          swift build -c release
          ./scripts/create_license_bundle.sh
          zip -9jpr Swift-MesonLSP-macos13.zip .build/release/Swift-MesonLSP 3rdparty.txt COPYING
      - name: Upload to release
        uses: xresloader/upload-to-github-release@main
        with:
          file: Swift-MesonLSP-macos13.zip
          verbose: true
          update_latest_release: true
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
  aur-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Update AUR package
        uses: JCWasmx86/update-aur-package@master
        with:
          package_name: swift-mesonlsp
          commit_username: "JCWasmx86"
          commit_email: JCWasmx86@t-online.de
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
  trigger-copr:
    name: Submit a COPR
    container: fedora:latest
    runs-on: ubuntu-latest
    steps:
      - name: Check out proper version of sources
        uses: actions/checkout@v1

      - name: Install API token for copr-cli
        env:
          API_TOKEN_CONTENT: ${{ secrets.COPR_API_TOKEN }}
        run: |
          mkdir -p "$HOME/.config"
          echo "$API_TOKEN_CONTENT" > "$HOME/.config/copr"

      - name: Install tooling for source RPM build
        run: |
          dnf -y install @development-tools @rpm-development-tools
          dnf -y install copr-cli make
          wget https://github.com/JCWasmx86/Swift-MesonLSP/archive/refs/tags/${GITHUB_REF_NAME}.tar.gz

      - name: Build the source RPM
        run: rpmbuild -bs Swift-MesonLSP.spec --define "_sourcedir $PWD" --define "_srcrpmdir $PWD"

      - name: Submit the build by uploading the source RPM
        run: copr build jcwasmx86/Swift-MesonLSP *.src.rpm
  update-apt-repo:
    name: Update APT repo
    runs-on: ubuntu-latest
    steps:
      - name: Check out proper version of sources
        uses: actions/checkout@v1
      - name: Build and upload deb files
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        run: |
          sudo apt purge -y podman
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/xUbuntu_$(lsb_release -rs)/Release.key | gpg --dearmor | sudo tee /etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg > /dev/null
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/devel_kubic_libcontainers_unstable.gpg] https://download.opensuse.org/repositories/devel:kubic:libcontainers:unstable/xUbuntu_$(lsb_release -rs)/ /" sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:unstable.list > /dev/null
          sudo apt-get update
          sudo apt-get -y install podman dpkg reprepro
          podman --version
          DOCKER_BUILDKIT=1 docker build --file docker/Dockerfile.ubuntu1804 --output out .
          DOCKER_BUILDKIT=1 docker build --file docker/Dockerfile.ubuntu2004 --output out1 .
          DOCKER_BUILDKIT=1 docker build --file docker/Dockerfile.ubuntu --output out2 .
          cd out
          unzip Ubuntu18.04.zip
          cd ../out1
          unzip Ubuntu20.04.zip
          cd ../out2
          unzip Ubuntu22.04.zip
          cd ..
          sudo ./.debian/build_debs_ubuntu.sh
          rm -rf out out1 out2
          DOCKER_BUILDKIT=1 docker build --file docker/Dockerfile.debianStable --output out .
          DOCKER_BUILDKIT=1 docker build --file docker/Dockerfile.debianTesting --output out1 .
          DOCKER_BUILDKIT=1 docker build --file docker/Dockerfile.debianUnstable --output out2 .
          cd out
          unzip Debian-Stable.zip
          cd ../out1
          unzip Debian-Testing.zip
          cd ../out2
          unzip Debian-Unstable.zip
          cd ..
          sudo ./.debian/build_debs_debian.sh
          git clone https://.:${{ secrets.API_TOKEN_GITHUB }}@github.com/JCWasmx86/swift-mesonlsp-apt-repo target
          cd target
          git config --global user.email "JCWasmx86@t-online.de"
          git config --global user.name "JCWasmx86"
          cd apt
          cp /*.deb .
          . update.sh
  windows-573:
    runs-on: windows-2019
    steps:
      - name: Enable long paths
        shell: powershell
        run: |
          Set-ItemProperty -Path "HKLM:\\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1
      - name: Get page file information
        shell: powershell
        run: |
          wmic pagefile
      - name: Configure pagefile
        uses: al-cheb/configure-pagefile-action@v1.3
        with:
          minimum-size: 3GB
          maximum-size: 8GB
          disk-root: "D:"
      - name: Get page file information again
        shell: powershell
        run: |
          wmic pagefile
      - uses: compnerd/gha-setup-swift@main
        with:
          branch: swift-5.7.3-release
          tag: 5.7.3-RELEASE
      - uses: actions/checkout@v3
      - name: Build and test
        shell: powershell
        run: |
          cd ..\..
          git clone https://github.com/JCWasmx86/Swift-MesonLSP b
          cd b
          while (-not (Test-Path ".build\\release\\Swift-MesonLSP.exe")) {
            swift build -c release
          }
          $destinationFilePath = "$env:GITHUB_WORKSPACE"
          Copy-Item "C:\\Program Files\\swift\\runtime-development\\usr\\bin\\BlocksRuntime.dll" -Destination $destinationFilePath -Force
          Copy-Item "C:\\Program Files\\swift\\runtime-development\\usr\\bin\\dispatch.dll" -Destination $destinationFilePath -Force
          Copy-Item "C:\\Program Files\\swift\\runtime-development\\usr\\bin\\Foundation.dll" -Destination $destinationFilePath -Force
          Copy-Item "C:\\Program Files\\swift\\runtime-development\\usr\\bin\\swift_Concurrency.dll" -Destination $destinationFilePath -Force
          Copy-Item "C:\\Program Files\\swift\\runtime-development\\usr\\bin\\swiftCore.dll" -Destination $destinationFilePath -Force
          Copy-Item "C:\\Program Files\\swift\\runtime-development\\usr\\bin\\swiftCRT.dll" -Destination $destinationFilePath -Force
          Copy-Item "C:\\Program Files\\swift\\runtime-development\\usr\\bin\\swiftDispatch.dll" -Destination $destinationFilePath -Force
          Copy-Item "C:\\Program Files\\swift\\runtime-development\\usr\\bin\\swiftWinSDK.dll" -Destination $destinationFilePath -Force
          Copy-Item "C:\\Program Files\\swift\\icu-69.1\\usr\\bin\\icudt69.dll" -Destination $destinationFilePath -Force
          Copy-Item "C:\\Program Files\\swift\\icu-69.1\\usr\\bin\\icuin69.dll" -Destination $destinationFilePath -Force
          Copy-Item "C:\\Program Files\\swift\\icu-69.1\\usr\\bin\\icuuc69.dll" -Destination $destinationFilePath -Force
          $sourceFilePath = ".build\release\Swift-MesonLSP.exe"
          $destinationFilePath = "$env:GITHUB_WORKSPACE\Swift-MesonLSP.exe"
          Copy-Item -Path $sourceFilePath -Destination $destinationFilePath -Force
      - name: Create license bundle
        shell: bash
        run: |
          ./scripts/create_license_bundle.sh
          cd ../../b || exit 0
          ./scripts/create_license_bundle.sh || true
      - name: Zip it up
        shell: powershell
        run: |
          cd ${{ github.workspace }}
          $sourcePath = "${{ github.workspace }}"
          $zipFilePath = "${{ github.workspace }}/Swift-MesonLSP-win64.zip"
          $files = Get-ChildItem -Path $sourcePath -Filter *.dll, *.exe, COPYING, 3rdparty.txt -File
          Compress-Archive -Path $files.FullName -DestinationPath $zipFilePath
      - name: Upload to release
        uses: xresloader/upload-to-github-release@main
        with:
          file: Swift-MesonLSP-win64.zip
          verbose: true
          update_latest_release: true
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
