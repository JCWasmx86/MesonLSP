R"=====({
  "typeDocs" : {
    "qt5_module" : "The Qt5 module provides tools to automatically deal with the various tools and steps required for Qt.",
    "external_program" : "Opaque object representing an external program",
    "disabler" : "A disabler object is an object that behaves in much the same way as NaN numbers do in floating point math. That is when used in any statement (function call, logical op, etc) they will cause the statement evaluation to immediately short circuit to return a disabler object.",
    "any" : "A placeholder representing all types. This includes builtin, as well as returned objects.",
    "alias_tgt" : "Opaque object returned by `alias_target()`.",
    "cmake_module" : "This module provides helper tools for generating cmake package files. It also supports the usage of CMake based subprojects, similar to the normal Meson subprojects.",
    "dep" : "Abstract representation of a dependency.",
    "build_tgt" : "A build target is either an executable, shared library, static library, both shared and static library or shared module.",
    "generator" : "This object is returned by `generator()` and contains a generator that is used to transform files from one type to another by an executable (e.g. idl files into source code and headers).",
    "range" : "Opaque object that can be used in a loop and accessed via `[num]`.",
    "python_installation" : "The python_installation object is an external_program, with several added methods.",
    "jar" : "A Java JAR build target",
    "python_module" : "This module provides support for finding and building extensions against python installations, be they python 2 or 3.",
    "custom_idx" : "References a specific output file of a `custom_tgt` object.",
    "feature" : "Meson object representing a `feature` option.",
    "module" : "Base type for all modules.",
    "run_tgt" : "Opaque object returned by `run_target()`.",
    "extracted_obj" : "Opaque object representing extracted object files from build targets",
    "build_machine" : "Provides information about the build machine -- the machine that is doing the actual compilation.",
    "sourceset_module" : "This module provides support for building many targets against a single set of files; the choice of which files to include in each target depends on the contents of a dictionary or a `configuration_data` object.",
    "exe" : "An executable",
    "both_libs" : "Container for both a static and shared library.",
    "cmake_subproject" : "This object is returned by the `cmake_module.subproject()`",
    "compiler" : "This object is returned by `meson.get_compiler()`. It represents a compiler for a given language and allows you to query its properties.",
    "void" : "Indicates that the function does not return anything. Similar to `void` in C and C++",
    "hotdoc_module" : "This module provides helper functions for generating documentation using hotdoc.",
    "wayland_module" : "This module provides helper functions to find wayland protocol xmls and to generate .c and .h files using wayland-scanner",
    "keyval_module" : "This module parses files consisting of a series of `key=value` lines. One use of this module is to load kconfig configurations in Meson projects.",
    "cmake_subprojectoptions" : "This object is returned by the `cmake_module.subproject_options()` method and consumed by the `options` kwarg of the `subproject` method.",
    "env" : "This object is returned by `environment()` and stores detailed information about how environment variables should be set during tests. It should be passed as the env keyword argument to tests and other functions.",
    "windows_module" : "This module provides functionality used to build applications for Windows.",
    "dict" : "Stores a mapping of strings to other objects. You can also iterate over dictionaries with the `foreach` statement.",
    "qt6_module" : "The Qt6 module provides tools to automatically deal with the various tools and steps required for Qt.",
    "qt4_module" : "This module provides support for Qt4's moc, uic and rcc tools. It is used identically to the Qt 5 module.",
    "file" : "Opaque object that stores the path to an existing file",
    "custom_tgt" : "This object is returned by `custom_target()`.",
    "i18n_module" : "This module provides internationalisation and localisation functionality.",
    "list" : "An array of elements. An array can contain an arbitrary number of objects of any type. Note appending to an array will always create a new array object instead of modifying the original since all objects in Meson are immutable.",
    "structured_src" : "Opaque object returned by `structured_sources()`.",
    "meson" : "The `meson` object allows you to introspect various properties of the system. This object is always mapped in the `meson` variable.",
    "cuda_module" : "This module provides helper functionality related to the CUDA Toolkit and building code using it.",
    "simd_module" : "This module provides helper functionality to build code with SIMD instructions. Available since 0.42.0.",
    "subproject" : "This object is returned by `subproject()` and is an opaque object representing it.",
    "sourceset" : "The `source_set` object provides methods to add files to a source set and to query it. The source set becomes immutable after any method but `add` is called.",
    "inc" : "Opaque wrapper for storing include directories",
    "cfg_data" : "This object encapsulates configuration values to be used for generating configuration files.",
    "runresult" : "This object encapsulates the result of trying to compile and run a sample piece of code with `compiler.run()` or `run_command()`.",
    "python3_module" : "This module provides support for dealing with Python 3. This module is deprecated and replaced by the `python` module.",
    "int" : "All integer numbers. Meson supports only integer numbers. Hexadecimal, binary and octal literals are supported.",
    "fs_module" : "This module provides functions to inspect the file system.",
    "pkgconfig_module" : "This module is a simple generator for pkg-config files.",
    "str" : "Strings are immutable, all operations return their results as a new string.",
    "tgt" : "Opaque base object for all Meson targets",
    "icestorm_module" : "This module provides an experimental method to create FPGA bitstreams using the IceStorm suite of tools.",
    "java_module" : "This module provides methods for generating headers for the JNI.",
    "target_machine" : "Provides information about the target machine -- the machine on which the compiled binary's output will run.",
    "generated_list" : "Opaque object representing the result of a `generator.process()` call.",
    "host_machine" : "Provides information about the host machine -- the machine on which the compiled binary will run.",
    "dlang_module" : "This module provides tools related to the D programming language.\n\nThe module only exposes one function, `generate_dub_file`, used to automatically generate Dub configuration files.",
    "gnome_module" : "This module provides helper tools for build operations needed when building Gnome\/GLib programs.",
    "lib" : "Represents either a shared or static library",
    "bool" : "A boolean object which is either `true` or `false`",
    "source_configuration" : "The `source_configuration` object provides methods to query the result of an `apply` operation on a source set.",
    "rust_module" : "The rust module provides helper to integrate rust code into Meson. The goal is to make using rust in Meson more pleasant, while still remaining mesonic, this means that it attempts to make Rust work more like Meson, rather than Meson work more like rust."
  },
  "docs" : {
    "library<objects>" : "List of object files that should be linked in this target.",
    "both_libraries<version>" : "A string specifying the version of this shared library, such as 1.1.0. On Linux and OS X, this is used to set the shared library version in the filename, such as libfoo.so.1.1.0 and libfoo.1.1.0.dylib. If this is not specified, soversion is used instead.",
    "shared_module<cpp_args>" : "Compiler flags for C++",
    "executable<dependencies>" : "One or more dependency objects",
    "executable<extra_files>" : "Not used for the build itself but are shown as source files in IDEs that group files by targets (such as Visual Studio)",
    "feature.require" : "Returns the object itself if the value is true; an error if the object is 'enabled' and the value is false; a disabled feature if the object is 'auto' or 'disabled' and the value is false.",
    "meson.project_license_files" : "Returns the array of license files specified in the project() function call.",
    "executable<link_depends>" : "Strings, files, or custom targets the link step depends on such as a symbol visibility map. The purpose is to automatically trigger a re-link (but not a re-compile) of the target when this file changes.",
    "library" : "Builds a library that is either static, shared or both.",
    "install_symlink<install_tag>" : "A string used by the meson install --tags command to install only a subset of the files. By default these files have no install tag which means they are not being installed when --tags argument is specified.",
    "compiler.links<args>" : "Used to pass a list of compiler arguments. Defining include paths for headers not in the default include path via -Isome\/path\/to\/header is generally supported, however, usually not recommended.",
    "subdir" : "Enters the specified subdirectory and executes the meson.build file in it. Once that is done, it returns and execution continues on the line following this subdir() command. Variables defined in that meson.build file are then available for use in later parts of the current build file and in all subsequent build files executed with subdir().",
    "compiler.compute_int" : "Computes the value of the given expression",
    "library<pic>" : "Builds the library as positional independent code (so it can be linked into a shared library). This option has no effect on Windows and OS X since it doesn't make sense on Windows and PIC cannot be disabled on OS X.",
    "add_project_link_arguments<language>" : "Specifies the language(s) that the arguments should be",
    "runresult.compiled" : "If true, the compilation succeeded, if false it did not and the other methods return unspecified data. This is only available for `compiler.run()` results.",
    "compiler.has_header_symbol<include_directories>" : "Extra directories for header searches.",
    "library<vala_args>" : "Compiler flags for Vala",
    "cfg_data.set" : "Sets a variable to a given value",
    "add_test_setup<exclude_suites>" : "A list of test suites that should be excluded when using this setup",
    "compiler.has_member" : "Returns true if the type has the specified member.",
    "add_languages<required>" : "If set to `true`, Meson will halt if any of the languages",
    "add_global_arguments" : "Add global arguments to the compiler command line.",
    "qt5_module.compile_resources" : "Compiles Qt's resources collection files (.qrc) into c++ files for compilation.",
    "vcs_tag<command>" : "The command to execute, see custom_target() for details on how this command must be specified.",
    "test" : "Defines a test to run with the test harness.",
    "python_module.find_installation" : "Find a python installation matching `name_or_path`. That argument is optional, if not provided then the returned python installation will be the one used to run Meson.",
    "both_libraries<build_by_default>" : "Causes, when set to true, to have this target be built by default. This means it will be built when meson compile is called without any arguments. The default value is true for all built target types.",
    "disabler.found" : "Always returns false",
    "declare_dependency<variables>" : "A dictionary of arbitrary strings, this is meant to be used in subprojects where special variables would be provided via cmake or pkg-config. since 0.56.0 it can also be a list of 'key=value' strings.",
    "cfg_data.set<description>" : "Message \/ Comment that will be written in the result file. The replacement assumes a file with C syntax. If your generated file is source code in some other language, you probably don't want to add a description field because it most likely will cause a syntax error.",
    "install_man<install_mode>" : "Specify the file mode in symbolic format and optionally the owner\/uid and group\/gid for the installed files.",
    "dep.partial_dependency" : "Returns a new dependency object with the same name, version, found status, type name, and methods as the object that called it. This new object will only inherit other attributes from its parent as controlled by keyword arguments.",
    "cmake_subprojectoptions.append_compile_args" : "Append comile flags for a specific language to the targets",
    "both_libraries<vs_module_defs>" : "Specify a Microsoft module definition file for controlling symbol exports, etc., on platforms where that is possible (e.g. Windows).",
    "shared_library<version>" : "A string specifying the version of this shared library, such as 1.1.0. On Linux and OS X, this is used to set the shared library version in the filename, such as libfoo.so.1.1.0 and libfoo.1.1.0.dylib. If this is not specified, soversion is used instead.",
    "static_library<install_dir>" : "Override install directory for this file. If the value is a relative path, it will be considered relative the prefix option",
    "shared_module<install>" : "When set to true, this executable should be installed.",
    "meson.add_install_script<skip_if_destdir>" : "If true the script will not be run if DESTDIR is set during installation. This is useful in the case the script updates system wide cache that is only needed when copying files into final destination.",
    "executable<c_args>" : "Compiler flags for C",
    "dependency<method>" : "Defines the way the dependency is detected, the default is auto but can be overridden to be e.g. qmake for Qt development, and different dependencies support different values for this (though auto will work on all of them)",
    "run_target<env>" : "Environment variables to set",
    "is_disabler" : "Returns true if a variable is a disabler and false otherwise.",
    "build_target<darwin_versions>" : "Defines the compatibility version and current version for the dylib on macOS. If a list is specified, it must be either zero, one, or two elements. If only one element is specified or if it's not a list, the specified value will be used for setting both compatibility version and current version. If unspecified, the soversion will be used as per the aforementioned rules.",
    "meson.project_source_root" : "Returns a string with the absolute path to the source root directory of the current (sub)project.",
    "dep.get_variable<configtool>" : "The configtool variable name",
    "jar<c_args>" : "Compiler flags for C",
    "shared_library<link_with>" : "One or more shared or static libraries (built by this project) that this target should be linked with. (since 0.41.0) If passed a list this list will be flattened. (since 0.51.0) The arguments can also be custom targets. In this case Meson will assume that merely adding the output file in the linker command line is sufficient to make linking work. If this is not sufficient, then the build system writer must write all other steps manually.",
    "shared_library<rust_crate_type>" : "Set the specific type of rust crate to compile (when compiling rust).",
    "project<subproject_dir>" : "Specifies the top level directory name that holds Meson subprojects. This is only meant as a compatibility option for existing code bases that house their embedded source code in a custom directory. All new projects should not set this but instead use the default value. It should be noted that this keyword argument is ignored inside subprojects. There can be only one subproject dir and it is set in the top level Meson file.",
    "executable<gnu_symbol_visibility>" : "Specifies how symbols should be exported: default\/internal\/hidden\/protected\/inlineshidden",
    "compiler.sizeof<args>" : "Used to pass a list of compiler arguments. Defining include paths for headers not in the default include path via -Isome\/path\/to\/header is generally supported, however, usually not recommended.",
    "build_target<java_resources>" : "Resources to be added to the jar",
    "dep.type_name" : "Returns a string describing the type of the dependency, the most common values are `internal` for deps created with `declare_dependency()` and `pkgconfig` for system dependencies obtained with Pkg-config.",
    "build_target<link_depends>" : "Strings, files, or custom targets the link step depends on such as a symbol visibility map. The purpose is to automatically trigger a re-link (but not a re-compile) of the target when this file changes.",
    "executable<sources>" : "Additional source files. Same as the source varargs.",
    "static_library<d_import_dirs>" : "List of directories to look in for string imports used in the D programming language.",
    "compiler.has_multi_arguments" : "The same as `compiler.has_argument()` but takes multiple arguments and uses them all in a single compiler invocation.",
    "str.format" : "Strings can be built using the string formatting functionality.",
    "qt6_module.compile_ui" : "Compiles Qt's ui files (.ui) into header files.",
    "both_libraries<include_directories>" : "One or more objects created with the include_directories() function, or (since 0.50.0) strings, which will be transparently expanded to include directory objects",
    "both_libraries<rust_args>" : "Compiler flags for Rust",
    "summary" : "This function is used to summarize build configuration at the end of the build process. This function provides a way for projects (and subprojects) to report this information in a clear way.",
    "compiler.find_library<header_include_directories>" : "When the `has_headers` kwarg is also used, this argument is passed to `compiler.has_header()` as include_directories.",
    "meson.override_find_program" : "specifies that whenever `find_program()` is used to find a program named `progname`, Meson should not look it up on the system but instead return `program`, which may either be the result of `find_program()`, `configure_file()` or `executable()`.",
    "static_library<link_with>" : "One or more shared or static libraries (built by this project) that this target should be linked with. (since 0.41.0) If passed a list this list will be flattened. (since 0.51.0) The arguments can also be custom targets. In this case Meson will assume that merely adding the output file in the linker command line is sufficient to make linking work. If this is not sufficient, then the build system writer must write all other steps manually.",
    "bool.to_string" : "Returns the string 'true' if the boolean is true or 'false' otherwise. You can also pass it two strings as positional arguments to specify what to return for true\/false. For instance, bool.to_string('yes', 'no') will return yes if the boolean is true and no if it is false.",
    "both_libraries<install_tag>" : "A string used by the `meson install --tags` command to install only a subset of the files. By default all build targets have the tag runtime except for static libraries that have the devel tag.",
    "jar<link_with>" : "One or more shared or static libraries (built by this project) that this target should be linked with. (since 0.41.0) If passed a list this list will be flattened. (since 0.51.0) The arguments can also be custom targets. In this case Meson will assume that merely adding the output file in the linker command line is sufficient to make linking work. If this is not sufficient, then the build system writer must write all other steps manually.",
    "shared_library<dependencies>" : "One or more dependency objects",
    "cmake_module.write_basic_package_version_file<compatibility>" : "A string indicating the kind of compatibility, the accepted values are `AnyNewerVersion`, `SameMajorVersion`, `SameMinorVersion` or `ExactVersion`. It defaults to AnyNewerVersion. Depending on your cmake installation some kind of compatibility may not be available.",
    "dep.version" : "The version number as a string.",
    "qt5_module.compile_translations" : "This method generates the necessary targets to build translation files with lrelease.",
    "meson.add_devenv<method>" : "Must be one of 'set', 'prepend', or 'append' (defaults to 'set'). Controls if initial values defined in the first positional argument are prepended, appended or replace the current value of the environment variable.",
    "build_target<win_subsystem>" : "Specifies the subsystem type to use on the Windows platform. Typical values include console for text mode programs and windows for gui apps. The value can also contain version specification such as windows,6.0",
    "run_target<depends>" : "A list of targets that this target depends on but which are not listed in the command array (because, for example, the script does file globbing internally)",
    "static_library<vala_args>" : "Compiler flags for Vala",
    "library<d_args>" : "Compiler flags for D",
    "benchmark<priority>" : "Specifies the priority of a test",
    "executable<fortran_args>" : "Compiler flags for Fortran",
    "shared_module<sources>" : "Additional source files. Same as the source varargs.",
    "compiler.has_function_attribute" : "Returns true if the compiler supports the GNU style (`__attribute__(...)`) `name`.",
    "install_man<locale>" : "Can be used to specify the locale into which the man page will be installed within the manual page directory tree.",
    "list.get" : "Returns the object at the given index, negative indices count from the back of the array, indexing out of bounds returns the fallback value or, if it is not specified, causes a fatal error",
    "feature.enabled" : "Returns whether the feature was set to 'enabled'",
    "compiler.sizeof" : "Returns the size of a given type or -1 is the type is unknown",
    "shared_module<version>" : "A string specifying the version of this shared library, such as 1.1.0. On Linux and OS X, this is used to set the shared library version in the filename, such as libfoo.so.1.1.0 and libfoo.1.1.0.dylib. If this is not specified, soversion is used instead.",
    "dependency<fallback>" : "Manually specifies a subproject fallback to use in case the dependency is not found in the system.",
    "qt5_module.compile_moc" : "Compiles Qt's moc files (.moc) into header and\/or source files.",
    "meson.global_build_root" : "Returns a string with the absolute path to the build root directory. This function will return the build root of the main project if called from a subproject, which is usually not what you want.",
    "library<prelink>" : "If true the object files in the target will be prelinked, meaning that it will contain only one prelinked object file rather than the individual object files.",
    "library<link_args>" : "Flags to use during linking. You can use UNIX-style flags here for all platforms.",
    "fs_module.replace_suffix" : "The `replace_suffix` method is a string manipulation convenient for filename modifications. It allows changing the filename suffix.",
    "build_target<native>" : "Controls whether the target is compiled for the build or host machines.",
    "subproject.found" : "Returns whether the subproject was successfully setup.",
    "build_tgt.name" : "Returns the name of the target.",
    "compiler.run<no_builtin_args>" : "When set to true, the compiler arguments controlled by built-in configuration options are not added.",
    "str.replace" : "Search all occurrences of `old` and and replace it with `new`",
    "shared_library<d_unittest>" : "When set to true, the D modules are compiled in debug mode.",
    "add_global_arguments<native>" : "A boolean specifying whether the arguments should be",
    "library<rust_args>" : "Compiler flags for Rust",
    "custom_target<build_by_default>" : "Causes, when set to true, to have this target be built by default. ",
    "both_libraries<d_module_versions>" : "List of module version identifiers set when compiling D sources.",
    "jar<soversion>" : "A string or integer specifying the soversion of this shared library, such as 0. On Linux and Windows this is used to set the soversion (or equivalent) in the filename. For example, if soversion is 4, a Windows DLL will be called foo-4.dll and one of the aliases of the Linux shared library would be libfoo.so.4. If this is not specified, the first part of version is used instead (see below). For example, if version is 3.6.0 and soversion is not defined, it is set to 3.",
    "shared_library<win_subsystem>" : "Specifies the subsystem type to use on the Windows platform. Typical values include console for text mode programs and windows for gui apps. The value can also contain version specification such as windows,6.0",
    "cfg_data.set_quoted" : "Is same as `cfg_data.set()` but quotes the value in double quotes (\")",
    "configure_file<encoding>" : "Set the file encoding for the input and output file",
    "build_target<link_whole>" : "Links all contents of the given static libraries whether they are used by not, equivalent to the -Wl,--whole-archive argument flag of GCC.",
    "compiler.links<no_builtin_args>" : "When set to true, the compiler arguments controlled by built-in configuration options are not added.",
    "compiler.get_supported_function_attributes" : "Returns an array containing any names that are supported GCC style attributes. Equivalent to `compiler.has_function_attribute()` was called on each of them individually.",
    "both_libraries<nasm_args>" : "Compiler flags for NASM",
    "compiler.preprocess<compile_args>" : "Extra flags to pass to the preprocessor",
    "compiler.has_link_argument" : "Returns true if the linker accepts the specified command line argument, that is, can compile and link code without erroring out or printing a warning about an unknown flag. Link arguments will be passed to the compiler, so should usually have the `-Wl,` prefix. On VisualStudio a `\/link` argument will be prepended.",
    "keyval_module.load" : "This function loads a file consisting of a series of `key=value` lines and returns a dictionary object.",
    "meson.add_postconf_script" : "Runs the given command after all project files have been generated. This script will have the environment variables `MESON_SOURCE_ROOT` and `MESON_BUILD_ROOT` set.",
    "benchmark<args>" : "Arguments to pass to the executable",
    "meson.get_compiler" : "Returns a `compiler` object describing a compiler.",
    "build_target" : "Creates a build target whose type can be set dynamically with the `target_type` keyword argument.",
    "declare_dependency<version>" : "The version of this dependency, such as 1.2.3. Defaults to the project version.",
    "shared_library<link_whole>" : "Links all contents of the given static libraries whether they are used by not, equivalent to the -Wl,--whole-archive argument flag of GCC.",
    "compiler.run<name>" : "The name to use for printing a message about the compiler check. If this keyword argument is not passed, no message will be printed about the check.",
    "compiler.get_define<include_directories>" : "Extra directories for header searches.",
    "declare_dependency<dependencies>" : "Other dependencies needed to use this dependency.",
    "bool.to_int" : "Returns 1 if true and 0 if false",
    "compiler.has_header<include_directories>" : "Extra directories for header searches.",
    "compiler.compute_int<include_directories>" : "Extra directories for header searches.",
    "build_target<include_directories>" : "One or more objects created with the include_directories() function, or (since 0.50.0) strings, which will be transparently expanded to include directory objects",
    "configure_file<input>" : "The input file name",
    "env.prepend<separator>" : "The separator to use. If not explicitly specified, the default path separator for the host operating system will be used, i.e. ';' for Windows and ':' for UNIX\/POSIX systems.",
    "python3_module.language_version" : "Returns a string with the Python language version such as `3.5`.",
    "executable<win_subsystem>" : "Specifies the subsystem type to use on the Windows platform. Typical values include console for text mode programs and windows for gui apps. The value can also contain version specification such as windows,6.0",
    "shared_library<cython_args>" : "Compiler flags for Cython",
    "compiler.compute_int<no_builtin_args>" : "When set to true, the compiler arguments controlled by built-in configuration options are not added.",
    "dep.get_variable<default_value>" : "The default value to return when the variable does not exist",
    "install_symlink<pointing_to>" : "Target to point the link to. Can be absolute or relative and that will be respected when creating the link.",
    "meson.is_cross_build" : "Returns true if the current build is a cross build and false otherwise.",
    "static_library<link_whole>" : "Links all contents of the given static libraries whether they are used by not, equivalent to the -Wl,--whole-archive argument flag of GCC.",
    "shared_module<name_suffix>" : "The string that will be used as the extension for the target by overriding the default. By default on Windows this is exe for executables and on other platforms it is omitted.",
    "build_target<install_dir>" : "Override install directory for this file. If the value is a relative path, it will be considered relative the prefix option",
    "compiler.has_header_symbol<args>" : "Used to pass a list of compiler arguments. Defining include paths for headers not in the default include path via -Isome\/path\/to\/header is generally supported, however, usually not recommended.",
    "shared_library<name_prefix>" : "The string that will be used as the prefix for the target output filename by overriding the default (only used for libraries). By default this is lib on all platforms and compilers, except for MSVC shared libraries where it is omitted to follow convention, and Cygwin shared libraries where it is cyg.",
    "executable<cpp_pch>" : "Precompiled header file to use for C++",
    "dependency<allow_fallback>" : "Specifies whether Meson should automatically pick a fallback subproject in case the dependency is not found in the system.",
    "build_target<build_by_default>" : "Causes, when set to true, to have this target be built by default. This means it will be built when meson compile is called without any arguments. The default value is true for all built target types.",
    "library<install_dir>" : "Override install directory for this file. If the value is a relative path, it will be considered relative the prefix option",
    "jar<objcpp_args>" : "Compiler flags for Objective-C++",
    "static_library<build_by_default>" : "Causes, when set to true, to have this target be built by default. This means it will be built when meson compile is called without any arguments. The default value is true for all built target types.",
    "both_libraries<dependencies>" : "One or more dependency objects",
    "sourcesfiles.dependencies" : "Return the dependencies corresponding to the applied configuration.",
    "custom_target<install_mode>" : "The file mode and optionally the owner\/uid and group\/gid.",
    "vcs_tag<replace_string>" : "String in the input file to substitute with the commit information.",
    "benchmark<protocol>" : "Specifies how the test results are parsed",
    "custom_tgt.to_list" : "Returns a list of opaque objects that references this target, and can be used as a source in other targets.",
    "jar<cpp_args>" : "Compiler flags for C++",
    "build_tgt.extract_all_objects" : "Acts the same as `extract_objects`, but returns all object files generated by this target.",
    "add_test_setup<env>" : "Environment variables to set",
    "shared_library<install>" : "When set to true, this executable should be installed.",
    "compiler.sizeof<include_directories>" : "Extra directories for header searches.",
    "both_libraries<objcpp_args>" : "Compiler flags for Objective-C++",
    "install_man<install_dir>" : "Where to install to.",
    "dependency<static>" : "Tells the dependency provider to try to get static libraries instead of dynamic ones (note that this is not supported by all dependency backends)",
    "static_library<cpp_pch>" : "Precompiled header file to use for C++",
    "python_installation.get_variable" : "Get a variable as defined by the sysconfig module.",
    "meson.get_compiler<native>" : "When set to true Meson returns the compiler for the build machine (the \"native\" compiler) and when false it returns the host compiler (the \"cross\" compiler). If native is omitted, Meson returns the \"cross\" compiler if we're currently cross-compiling and the \"native\" compiler if we're not.",
    "build_target<rust_args>" : "Compiler flags for Rust",
    "fs_module.exists" : "Takes a single string argument and returns true if an entity with that name exists on the file system. This can be a file, directory or a special entry such as a device node.",
    "executable<gui_app>" : "When set to true flags this target as a GUI application on platforms where this makes a differerence, deprecated since 0.56.0, use win_subsystem instead.",
    "dep.partial_dependency<link_args>" : "Whether to include link_args",
    "compiler.cmd_array" : "Returns an array containing the command(s) for the compiler.",
    "str.contains" : "Returns true if string contains the string specified as the argument.",
    "library<link_whole>" : "Links all contents of the given static libraries whether they are used by not, equivalent to the -Wl,--whole-archive argument flag of GCC.",
    "meson.project_version" : "Returns the version string specified in project() function call.",
    "both_libraries<d_debug>" : "The D version identifiers to add during the compilation of D source files.",
    "both_libraries<link_language>" : "Makes the linker for this target be for the specified language. It is generally unnecessary to set this, as Meson will detect the right linker to use in most cases. There are only two cases where this is needed. One, your main function in an executable is not in the language Meson picked, or second you want to force a library to use only one ABI.",
    "configure_file<install_dir>" : "The subdirectory to install the generated file to",
    "shared_module<install_rpath>" : "A string to set the target's rpath to after install (but not before that). On Windows, this argument has no effect.",
    "shared_module<c_pch>" : "Precompiled header file to use for C",
    "library<cpp_args>" : "Compiler flags for C++",
    "shared_library<d_debug>" : "The D version identifiers to add during the compilation of D source files.",
    "build_target<implicit_include_directories>" : "Controls whether Meson adds the current source and build directories to the include path",
    "both_libraries<build_rpath>" : "A string to add to target's rpath definition in the build dir, but which will be removed on install",
    "jar<c_pch>" : "Precompiled header file to use for C",
    "executable<install_rpath>" : "A string to set the target's rpath to after install (but not before that). On Windows, this argument has no effect.",
    "test<env>" : "Environment variables to set",
    "shared_module<objcpp_args>" : "Compiler flags for Objective-C++",
    "jar<install_dir>" : "Override install directory for this file. If the value is a relative path, it will be considered relative the prefix option",
    "build_target<cpp_pch>" : "Precompiled header file to use for C++",
    "dep.get_configtool_variable" : "Gets the command line argument from the config tool, or, if invoked on a non config-tool dependency, error out.",
    "shared_module<d_unittest>" : "When set to true, the D modules are compiled in debug mode.",
    "dep.get_variable<cmake>" : "The CMake variable name",
    "custom_target<build_always>" : "If true this target is always considered out of date and is rebuilt every time. ",
    "executable<link_whole>" : "Links all contents of the given static libraries whether they are used by not, equivalent to the -Wl,--whole-archive argument flag of GCC.",
    "executable<d_unittest>" : "When set to true, the D modules are compiled in debug mode.",
    "jar<gui_app>" : "When set to true flags this target as a GUI application on platforms where this makes a differerence, deprecated since 0.56.0, use win_subsystem instead.",
    "shared_module<gui_app>" : "When set to true flags this target as a GUI application on platforms where this makes a differerence, deprecated since 0.56.0, use win_subsystem instead.",
    "test<protocol>" : "Specifies how the test results are parsed and can be one of exitcode, tap, or gtest",
    "static_library<sources>" : "Additional source files. Same as the source varargs.",
    "shared_library<masm_args>" : "Compiler flags for MASM",
    "static_library<cython_args>" : "Compiler flags for Cython",
    "build_target<name_prefix>" : "The string that will be used as the prefix for the target output filename by overriding the default (only used for libraries). By default this is lib on all platforms and compilers, except for MSVC shared libraries where it is omitted to follow convention, and Cygwin shared libraries where it is cyg.",
    "custom_target<output>" : "List of output files.",
    "jar<win_subsystem>" : "Specifies the subsystem type to use on the Windows platform. Typical values include console for text mode programs and windows for gui apps. The value can also contain version specification such as windows,6.0",
    "static_library<objc_args>" : "Compiler flags for Objective-C",
    "shared_module<implicit_include_directories>" : "Controls whether Meson adds the current source and build directories to the include path",
    "jar<nasm_args>" : "Compiler flags for NASM",
    "add_project_arguments" : "Add project specific arguments to the compiler command line.",
    "both_libraries<objects>" : "List of object files that should be linked in this target.",
    "build_target<objc_args>" : "Compiler flags for Objective-C",
    "benchmark<timeout>" : "The amount of seconds the test is allowed to run",
    "sourceset.all_dependencies" : "Returns a list of all dependencies that were placed in the source set using `add` (including nested source sets) and that were found.",
    "feature.auto" : "Returns whether the feature was set to 'auto'",
    "meson.override_dependency<static>" : "Used to override static and\/or shared dependencies separately. If not specified it is assumed `dep_object` follows `default_library` option value.",
    "compiler.preprocess" : "Preprocess a list of source files but do not compile them",
    "jar<java_resources>" : "Resources to be added to the jar",
    "disabler" : "Returns a `disabler` object",
    "compiler.compute_int<high>" : "The max value.",
    "static_library<masm_args>" : "Compiler flags for MASM",
    "library<install_rpath>" : "A string to set the target's rpath to after install (but not before that). On Windows, this argument has no effect.",
    "shared_library<link_depends>" : "Strings, files, or custom targets the link step depends on such as a symbol visibility map. The purpose is to automatically trigger a re-link (but not a re-compile) of the target when this file changes.",
    "cmake_module.configure_package_config_file" : "This method is the equivalent of the corresponding CMake function, it generates a `name` package configuration file from the `input` template file.",
    "compiler.sizeof<prefix>" : "Used to add `#include`s and other things that are required for the symbol to be declared. Since 1.0.0 an array is accepted too. When an array is passed, the items are concatenated together separated by a newline.",
    "cmake_module.configure_package_config_file<configuration>" : "A a configuration_data object that will be used for variable substitution in the template file. Since 0.62.0 it can take a dictionary instead.",
    "compiler.compute_low<high>" : "The min value.",
    "python_installation.has_path" : "True if the given path can be retrived with `get_path`",
    "cmake_subprojectoptions.append_link_args" : "Append linker args to the targets",
    "run_command" : "Runs the command specified in positional arguments.",
    "find_program<required>" : "When true, Meson will abort if no program can be found.",
    "runresult.returncode" : "The return code of executing the compiled binary",
    "message" : "This function prints its argument to stdout.",
    "fs_module.copyfile" : "Copy a file from the source directory to the build directory at build time",
    "cuda_module.nvcc_arch_readable" : "Has precisely the same interface as `nvcc_arch_flags()`, but rather than returning a list of flags, it returns a \"readable\" list of architectures that will be compiled for. The output of this function is solely intended for informative message printing.",
    "configure_file<output>" : "The output file name",
    "compiler.find_library<static>" : "If true, the search is limited to static libraries only. Setting this value to false (the default) will search for both shared and static libraries.",
    "static_library<install>" : "When set to true, this executable should be installed.",
    "dict.keys" : "Returns an array of keys in the dictionary.",
    "configure_file<install_mode>" : "Specify the file mode in symbolic format",
    "static_library<objects>" : "List of object files that should be linked in this target.",
    "compiler.has_type<args>" : "Used to pass a list of compiler arguments. Defining include paths for headers not in the default include path via -Isome\/path\/to\/header is generally supported, however, usually not recommended.",
    "build_target<dependencies>" : "One or more dependency objects",
    "project<default_options>" : "Accecpts strings in the form key=value which have the same format as options to meson configure",
    "both_libraries<install_rpath>" : "A string to set the target's rpath to after install (but not before that). On Windows, this argument has no effect.",
    "jar<d_module_versions>" : "List of module version identifiers set when compiling D sources.",
    "build_target<d_unittest>" : "When set to true, the D modules are compiled in debug mode.",
    "meson.add_install_script" : "Causes the script given as an argument to be run during the install step, this script will have the environment variables `MESON_SOURCE_ROOT`, `MESON_BUILD_ROOT`, `MESON_INSTALL_PREFIX`, `MESON_INSTALL_DESTDIR_PREFIX`, and `MESONINTROSPECT` set. All positional arguments are passed as parameters.",
    "add_global_link_arguments<native>" : "A boolean specifying whether the arguments should be",
    "python3_module.sysconfig_path" : "Returns the Python sysconfig path without prefix, such as `lib\/python3.6\/site-packages`.",
    "cmake_subproject.target" : "Returns the raw build target",
    "library<nasm_args>" : "Compiler flags for NASM",
    "custom_target<command>" : "Command to run to create outputs from inputs.",
    "cmake_module.configure_package_config_file<install_dir>" : "Optional installation directory, it defaults to `$(libdir)\/cmake\/$(name)`",
    "meson.project_build_root" : "Returns a string with the absolute path to the build root directory of the current (sub)project.",
    "library<d_debug>" : "The D version identifiers to add during the compilation of D source files.",
    "install_man" : "Installs the specified man files from the source tree into system's man directory during the install step.",
    "feature.disable_auto_if" : "Returns the feature, with 'auto' converted to 'disabled' if `value` is true.",
    "library<d_import_dirs>" : "List of directories to look in for string imports used in the D programming language.",
    "meson.has_external_property<native>" : "Setting `native` to `true` forces retrieving a variable from the native file, even when cross-compiling.",
    "compiler.find_library" : "Tries to find the library specified in the positional argument.",
    "join_paths" : "Joins the given strings into a file system path segment.",
    "environment<method>" : "Must be one of 'set', 'prepend', or 'append' (defaults to 'set'). Controls if initial values defined in the first positional argument are prepended, appended or replace the current value of the environment variable.",
    "compiler.preprocess<output>" : "Template for name of preprocessed files: @PLAINNAME@ is replaced by the source filename and @BASENAME@ is replaced by the source filename without its extension.",
    "test<depends>" : "Specifies that this test depends on the specified target(s), even though it does not take any of them as a command line argument.",
    "executable<c_pch>" : "Precompiled header file to use for C",
    "declare_dependency<d_module_versions>" : "The D version identifiers to add during the compilation of D source files.",
    "compiler.get_define" : "Returns the given preprocessor symbol's value as a string or empty string if it is not defined.",
    "shared_library<rust_args>" : "Compiler flags for Rust",
    "compiler.check_header<args>" : "Used to pass a list of compiler arguments. Defining include paths for headers not in the default include path via -Isome\/path\/to\/header is generally supported, however, usually not recommended.",
    "dependency<version>" : "Specifies the required version, a string containing a comparison operator followed by the version string",
    "executable<pie>" : "Build a position-independent executable.",
    "static_library<override_options>" : "takes an array of strings in the same format as project's `default_options` overriding the values of these options for this target only.",
    "dep.get_variable<internal>" : "The internal variable name",
    "custom_target<install>" : "When true, one or more files of this target are installed during the install step",
    "fs_module.hash" : "Returns a string containing the hexadecimal hash digest of a file",
    "compiler.has_type<dependencies>" : "Additionally dependencies required for compiling and \/ or linking.",
    "build_target<cpp_args>" : "Compiler flags for C++",
    "dep.get_pkgconfig_variable<default>" : "The value to return if the variable was not found. A warning is issued if the variable is not defined and this kwarg is not set.",
    "shared_module<objc_args>" : "Compiler flags for Objective-C",
    "compiler.has_members<dependencies>" : "Additionally dependencies required for compiling and \/ or linking.",
    "compiler.has_members<prefix>" : "Used to add `#include`s and other things that are required for the symbol to be declared. Since 1.0.0 an array is accepted too. When an array is passed, the items are concatenated together separated by a newline.",
    "fs_module.parent" : "Returns the parent directory (i.e. dirname).",
    "build_target<c_args>" : "Compiler flags for C",
    "executable<rust_args>" : "Compiler flags for Rust",
    "executable<implicit_include_directories>" : "Controls whether Meson adds the current source and build directories to the include path",
    "install_subdir<install_dir>" : "Where to install to.",
    "cfg_data.get" : "Returns the value of varname, if the value has not been set returns default_value if it is defined (since 0.38.0) and errors out if not",
    "install_data<sources>" : "Additional files to install.",
    "dependency<language>" : "Defines what language-specific dependency to find if it's available for multiple languages.",
    "dep.as_link_whole" : "Returns a copy of the dependency object with all link_with arguments changed to link_whole.",
    "runresult.stdout" : "The standard out produced when the command was run.",
    "shared_library<build_by_default>" : "Causes, when set to true, to have this target be built by default. This means it will be built when meson compile is called without any arguments. The default value is true for all built target types.",
    "include_directories<is_system>" : "If set to true, flags the specified directories as system directories. This means that they will be used with the -isystem compiler argument rather than -I on compilers that support this flag (in practice everything except Visual Studio).",
    "subproject<default_options>" : "An array of default option values that override those set in the subproject's meson_options.txt",
    "cmake_module.write_basic_package_version_file" : "This method is the equivalent of the corresponding CMake function, it generates a `name` package version file.",
    "shared_module<link_language>" : "Makes the linker for this target be for the specified language. It is generally unnecessary to set this, as Meson will detect the right linker to use in most cases. There are only two cases where this is needed. One, your main function in an executable is not in the language Meson picked, or second you want to force a library to use only one ABI.",
    "configuration_data" : "Creates an empty configuration object.",
    "compiler.compute_int<name>" : "The name to use for printing a message about the compiler check. If this keyword argument is not passed, no message will be printed about the check.",
    "add_project_arguments<native>" : "A boolean specifying whether the arguments should be",
    "library<d_module_versions>" : "List of module version identifiers set when compiling D sources.",
    "static_library<win_subsystem>" : "Specifies the subsystem type to use on the Windows platform. Typical values include console for text mode programs and windows for gui apps. The value can also contain version specification such as windows,6.0",
    "build_target<d_args>" : "Compiler flags for D",
    "fs_module.expanduser" : "A path string with a leading `~` is expanded to the user home directory",
    "benchmark<depends>" : "Specifies that this test depends on the specified dependencies",
    "qt6_module.preprocess" : "Takes sources for moc, uic, and rcc, and converts them into c++ files for compilation.",
    "shared_module<win_subsystem>" : "Specifies the subsystem type to use on the Windows platform. Typical values include console for text mode programs and windows for gui apps. The value can also contain version specification such as windows,6.0",
    "configure_file" : "Configure file.",
    "shared_module<objects>" : "List of object files that should be linked in this target.",
    "both_libraries<java_args>" : "Compiler flags for Java",
    "compiler.has_function<prefix>" : "Used to add `#include`s and other things that are required for the symbol to be declared. Since 1.0.0 an array is accepted too. When an array is passed, the items are concatenated together separated by a newline.",
    "shared_module<build_rpath>" : "A string to add to target's rpath definition in the build dir, but which will be removed on install",
    "fs_module.as_posix" : "Assumes a windows path, even if on a Unix-like system",
    "compiler.has_header<prefix>" : "Used to add `#include`s and other things that are required for the symbol to be declared. Since 1.0.0 an array is accepted too. When an array is passed, the items are concatenated together separated by a newline.",
    "both_libraries<d_unittest>" : "When set to true, the D modules are compiled in debug mode.",
    "add_project_link_arguments<native>" : "A boolean specifying whether the arguments should be",
    "shared_module<c_args>" : "Compiler flags for C",
    "str.to_lower" : "Converts all characters to lower case",
    "cmake_module.write_basic_package_version_file<name>" : "The name of the package",
    "qt6_module.compile_translations" : "This method generates the necessary targets to build translation files with lrelease.",
    "both_libraries<prelink>" : "If true the object files in the target will be prelinked, meaning that it will contain only one prelinked object file rather than the individual object files.",
    "library<rust_crate_type>" : "Set the specific type of rust crate to compile (when compiling rust).",
    "build_target<prelink>" : "If true the object files in the target will be prelinked, meaning that it will contain only one prelinked object file rather than the individual object files.",
    "install_headers<preserve_path>" : "Disable stripping child-direcories from header files when installing.",
    "version_compare" : "Does semantic version comparison.",
    "static_library<cpp_args>" : "Compiler flags for C++",
    "shared_library<install_mode>" : "Specify the file mode in symbolic format and optionally the owner\/uid and group\/gid for the installed files.",
    "compiler.compute_int<guess>" : "The value to try first.",
    "install_emptydir<install_mode>" : "Specify the file mode in symbolic format and optionally the owner\/uid and group\/gid for the installed files.",
    "sourceset.all_sources" : "Returns a list of all sources that were placed in the source set using `add` (including nested source sets) and that do not have a not-found dependency. If a rule has a not-found dependency, only the `if_false` sources are included (if any).",
    "dep.include_type" : "Returns the value set by the `include_type` kwarg.",
    "both_libraries<rust_crate_type>" : "Set the specific type of rust crate to compile (when compiling rust).",
    "java_module.generate_native_header" : "This function will generate a header file for use in Java native module development by reading the supplied Java file for native method declarations.",
    "qt5_module.compile_ui" : "Compiles Qt's ui files (.ui) into header files.",
    "meson.has_exe_wrapper" : "Use `meson.can_run_host_binaries()` instead.",
    "jar<extra_files>" : "Not used for the build itself but are shown as source files in IDEs that group files by targets (such as Visual Studio)",
    "executable<build_by_default>" : "Causes, when set to true, to have this target be built by default. This means it will be built when meson compile is called without any arguments. The default value is true for all built target types.",
    "shared_library<gnu_symbol_visibility>" : "Specifies how symbols should be exported: default\/internal\/hidden\/protected\/inlineshidden",
    "add_project_link_arguments" : "Adds global arguments to the linker command line.",
    "external_project.dependency" : "Return a dependency object that can be used to build targets against a library from the external project.",
    "both_libraries<c_pch>" : "Precompiled header file to use for C",
    "static_library<d_debug>" : "The D version identifiers to add during the compilation of D source files.",
    "meson.source_root" : "Returns a string with the absolute path to the source root directory.",
    "build_target<pie>" : "Build a position-independent executable.",
    "custom_tgt.full_path" : "Returns a full path pointing to the result target file NOTE: In most cases using the object itself will do the same job as this and will also allow Meson to setup inter-target dependencies correctly.",
    "gnome_module.compile_schemas" : "When called, this method will compile the gschemas in the current directory. Note that this is not for installing schemas and is only useful when running the application locally for example during tests.",
    "python_installation.has_variable" : "True if the given variable can be retrived with `get_variable`",
    "both_libraries<cs_args>" : "Compiler flags for C#",
    "static_library<c_args>" : "Compiler flags for C",
    "shared_module<dependencies>" : "One or more dependency objects",
    "both_libraries<implicit_include_directories>" : "Controls whether Meson adds the current source and build directories to the include path",
    "library<java_args>" : "Compiler flags for Java",
    "library<gui_app>" : "When set to true flags this target as a GUI application on platforms where this makes a differerence, deprecated since 0.56.0, use win_subsystem instead.",
    "env.append<separator>" : "The separator to use. If not explicitly specified, the default path separator for the host operating system will be used, i.e. ';' for Windows and ':' for UNIX\/POSIX systems.",
    "static_library<pic>" : "Builds the library as positional independent code (so it can be linked into a shared library). This option has no effect on Windows and OS X since it doesn't make sense on Windows and PIC cannot be disabled on OS X.",
    "dep.get_variable<pkgconfig_define>" : "You can also redefine a variable by passing a list to this kwarg that can affect the retrieved variable: `['prefix', '\/'])`.",
    "shared_module<d_import_dirs>" : "List of directories to look in for string imports used in the D programming language.",
    "library<link_language>" : "Makes the linker for this target be for the specified language. It is generally unnecessary to set this, as Meson will detect the right linker to use in most cases. There are only two cases where this is needed. One, your main function in an executable is not in the language Meson picked, or second you want to force a library to use only one ABI.",
    "project" : "The first function called in each project, to initialize Meson.",
    "build_target<export_dynamic>" : "when set to true causes the target's symbols to be dynamically exported, allowing modules built using the `shared_module()` function to refer to functions, variables and other symbols defined in the executable itself. Implies the implib argument.",
    "install_data<install_dir>" : "The absolute or relative path to the installation directory. If this is a relative path, it is assumed to be relative to the prefix.",
    "meson.install_dependency_manifest" : "Installs a manifest file containing a list of all subprojects, their versions and license names to the file name given as the argument.",
    "include_directories" : "Returns an opaque object which contains the directories (relative to the current directory) given in the positional arguments.",
    "library<darwin_versions>" : "Defines the compatibility version and current version for the dylib on macOS. If a list is specified, it must be either zero, one, or two elements. If only one element is specified or if it's not a list, the specified value will be used for setting both compatibility version and current version. If unspecified, the soversion will be used as per the aforementioned rules.",
    "subdir<if_found>" : "Only enter the subdir if all `dep.found()` methods return `true`.",
    "shared_module<soversion>" : "A string or integer specifying the soversion of this shared library, such as 0. On Linux and Windows this is used to set the soversion (or equivalent) in the filename. For example, if soversion is 4, a Windows DLL will be called foo-4.dll and one of the aliases of the Linux shared library would be libfoo.so.4. If this is not specified, the first part of version is used instead (see below). For example, if version is 3.6.0 and soversion is not defined, it is set to 3.",
    "project<version>" : "A free form string describing the version of this project. You can access the value in your Meson build files with `meson.project_version()`. This can also be a file object pointing to a file that contains exactly one line of text.",
    "shared_library<override_options>" : "takes an array of strings in the same format as project's `default_options` overriding the values of these options for this target only.",
    "compiler.check_header<required>" : "When set to true, Meson will halt if the header check fails. When set to a feature option, the feature will control if it is searched and whether to fail if not found.",
    "compiler.has_member<no_builtin_args>" : "When set to true, the compiler arguments controlled by built-in configuration options are not added.",
    "compiler.links<include_directories>" : "Extra directories for header searches.",
    "shared_library<d_import_dirs>" : "List of directories to look in for string imports used in the D programming language.",
    "compiler.links" : "Returns true if the code compiles and links.",
    "build_target<version>" : "A string specifying the version of this shared library, such as 1.1.0. On Linux and OS X, this is used to set the shared library version in the filename, such as libfoo.so.1.1.0 and libfoo.1.1.0.dylib. If this is not specified, soversion is used instead.",
    "executable<java_args>" : "Compiler flags for Java",
    "executable<install_mode>" : "Specify the file mode in symbolic format and optionally the owner\/uid and group\/gid for the installed files.",
    "executable<native>" : "Controls whether the target is compiled for the build or host machines.",
    "shared_library<link_args>" : "Flags to use during linking. You can use UNIX-style flags here for all platforms.",
    "rust_module.bindgen" : "This function wraps bindgen to simplify creating rust bindings around C libraries. ",
    "cmake_module.configure_package_config_file<input>" : "The template file where that will be trated for variable substitutions contained in `configuration`",
    "gnome_module.compile_resources" : "This function compiles resources specified in an XML file into code that can be embedded inside the main binary. Similar a build target it takes two positional arguments. The first one is the name of the resource and the second is the XML file containing the resource definitions.",
    "qt4_module.preprocess" : "Takes sources for moc, uic, and rcc, and converts them into c++ files for compilation.",
    "dep.name" : "Returns the name of the dependency that was searched.",
    "executable<d_debug>" : "The D version identifiers to add during the compilation of D source files.",
    "static_library<d_args>" : "Compiler flags for D",
    "build_tgt.path" : "Returns a full path pointing to the result target file.",
    "jar<override_options>" : "takes an array of strings in the same format as project's `default_options` overriding the values of these options for this target only.",
    "library<native>" : "Controls whether the target is compiled for the build or host machines.",
    "external_program.found" : "Returns whether the executable was found.",
    "gnome_module.mkenums" : "Generates enum files for GObject using the `glib-mkenums` tool.\n\nMost libraries and applications will be using the same standard template with only minor tweaks, in which case the `gnome.mkenums_simple()` convenience method can be used instead.",
    "custom_target<input>" : "List of source files.",
    "static_library<cs_args>" : "Compiler flags for C#",
    "env.append" : "Appends the given values to the old value of the environment variable.",
    "compiler.has_header<dependencies>" : "Additionally dependencies required for compiling and \/ or linking.",
    "library<win_subsystem>" : "Specifies the subsystem type to use on the Windows platform. Typical values include console for text mode programs and windows for gui apps. The value can also contain version specification such as windows,6.0",
    "both_libraries<link_whole>" : "Links all contents of the given static libraries whether they are used by not, equivalent to the -Wl,--whole-archive argument flag of GCC.",
    "both_libraries<masm_args>" : "Compiler flags for MASM",
    "declare_dependency<link_with>" : "Libraries to link against.",
    "compiler.find_library<disabler>" : "If true, this method will return a disabler on a failed check.",
    "library<c_args>" : "Compiler flags for C",
    "install_subdir<strip_directory>" : "Install directory contents. If strip_directory=true only the last component of the source path is used.",
    "icestorm_module.project" : "Takes a set of Verilog files and a constraint file, produces outputfiles and run targets for running timing analysis and a target for uploading the bistream to an FGPA device",
    "static_library<name_prefix>" : "The string that will be used as the prefix for the target output filename by overriding the default (only used for libraries). By default this is lib on all platforms and compilers, except for MSVC shared libraries where it is omitted to follow convention, and Cygwin shared libraries where it is cyg.",
    "dep.get_pkgconfig_variable" : "Gets the pkg-config variable specified, or, if invoked on a non pkg-config dependency, error out.",
    "compiler.alignment<prefix>" : "Used to add `#include`s and other things that are required for the symbol to be declared. Since 1.0.0 an array is accepted too. When an array is passed, the items are concatenated together separated by a newline.",
    "int.to_string" : "Returns the value of the number as a string.",
    "cmake_module.write_basic_package_version_file<version>" : "The version of the generated package file",
    "both_libraries<gui_app>" : "When set to true flags this target as a GUI application on platforms where this makes a differerence, deprecated since 0.56.0, use win_subsystem instead.",
    "static_library<implicit_include_directories>" : "Controls whether Meson adds the current source and build directories to the include path",
    "configure_file<install>" : "When true, this generated file is installed during the install step",
    "compiler.has_function<include_directories>" : "Extra directories for header searches.",
    "library<install>" : "When set to true, this executable should be installed.",
    "static_library<java_args>" : "Compiler flags for Java",
    "declare_dependency<compile_args>" : "Compile arguments to use.",
    "compiler.get_define<no_builtin_args>" : "When set to true, the compiler arguments controlled by built-in configuration options are not added.",
    "cmake_subprojectoptions.set_override_option" : "Set specific build options for targets",
    "configure_file<command>" : "Command to run",
    "jar<install_tag>" : "A string used by the `meson install --tags` command to install only a subset of the files. By default all build targets have the tag runtime except for static libraries that have the devel tag.",
    "build_target<cython_args>" : "Compiler flags for Cython",
    "compiler.get_argument_syntax" : "Returns a string identifying the type of arguments the compiler takes.",
    "benchmark" : "Creates a benchmark item that will be run when the benchmark target is run.",
    "jar<java_args>" : "Compiler flags for Java",
    "jar<d_import_dirs>" : "List of directories to look in for string imports used in the D programming language.",
    "configure_file<depfile>" : "A dependency file that the command can write listing all the additional files this target depends on. A change in any one of these files triggers a reconfiguration.",
    "configure_file<copy>" : "Will copy the input to the build directory with the new name output",
    "cfg_data.has" : "Returns true if the specified variable is set",
    "compiler.find_library<header_args>" : "When the `has_headers` kwarg is also used, this argument is passed to `compiler.has_header()` as args.",
    "dep.partial_dependency<sources>" : "Whether to include sources",
    "meson.add_devenv" : "Add an `env` object to the list of environments that will be applied when using `meson devenv` command line.",
    "compiler.compiles<no_builtin_args>" : "When set to true, the compiler arguments controlled by built-in configuration options are not added.",
    "static_library<link_args>" : "Flags to use during linking. You can use UNIX-style flags here for all platforms.",
    "shared_module<link_with>" : "One or more shared or static libraries (built by this project) that this target should be linked with. (since 0.41.0) If passed a list this list will be flattened. (since 0.51.0) The arguments can also be custom targets. In this case Meson will assume that merely adding the output file in the linker command line is sufficient to make linking work. If this is not sufficient, then the build system writer must write all other steps manually.",
    "build_machine.cpu" : "Returns a more specific CPU name, such as i686, amd64, etc.",
    "compiler.compiles" : "Returns true if the code compiles.",
    "compiler.run<args>" : "Used to pass a list of compiler arguments. Defining include paths for headers not in the default include path via -Isome\/path\/to\/header is generally supported, however, usually not recommended.",
    "both_libraries<link_with>" : "One or more shared or static libraries (built by this project) that this target should be linked with. (since 0.41.0) If passed a list this list will be flattened. (since 0.51.0) The arguments can also be custom targets. In this case Meson will assume that merely adding the output file in the linker command line is sufficient to make linking work. If this is not sufficient, then the build system writer must write all other steps manually.",
    "generator<depfile>" : "A template string pointing to a dependency file that a generator can write listing all the additional files this target depends on, for example a C compiler would list all the header files it included, and a change in any one of these files triggers a recompilation,",
    "compiler.alignment<dependencies>" : "Additionally dependencies required for compiling and \/ or linking.",
    "library<cs_args>" : "Compiler flags for C#",
    "test<timeout>" : "The amount of seconds the test is allowed to run, a test that exceeds its time limit is always considered failed",
    "install_subdir<exclude_files>" : "A list of file names that should not be installed. Names are interpreted as paths relative to the subdir_name location.",
    "project<license>" : "Takes a string or array of strings describing the license(s) the code is under.",
    "env.set" : "Sets the environment variable specified in the first argument to the values in the varargs joined by the separator.",
    "test<workdir>" : "Absolute path that will be used as the working directory for the test",
    "custom_target<feed>" : "There are some compilers that can't be told to read their input from a file and instead read it from standard input. When this argument is set to true, Meson feeds the input file to stdin. Note that your argument list may not contain @INPUT@ when feed mode is active.",
    "shared_module<include_directories>" : "One or more objects created with the include_directories() function, or (since 0.50.0) strings, which will be transparently expanded to include directory objects",
    "add_languages<native>" : "If set to `true`, the language will be used to compile for the build",
    "shared_module<install_mode>" : "Specify the file mode in symbolic format and optionally the owner\/uid and group\/gid for the installed files.",
    "build_target<install>" : "When set to true, this executable should be installed.",
    "build_target<objects>" : "List of object files that should be linked in this target.",
    "shared_module<rust_crate_type>" : "Set the specific type of rust crate to compile (when compiling rust).",
    "both_libraries<sources>" : "Additional source files. Same as the source varargs.",
    "compiler.get_define<args>" : "Used to pass a list of compiler arguments. Defining include paths for headers not in the default include path via -Isome\/path\/to\/header is generally supported, however, usually not recommended.",
    "python_installation.dependency" : "This method accepts no positional arguments, and the same keyword arguments as the standard dependency() function. Returns a dependency",
    "jar<masm_args>" : "Compiler flags for MASM",
    "compiler.has_type<prefix>" : "Used to add `#include`s and other things that are required for the symbol to be declared. Since 1.0.0 an array is accepted too. When an array is passed, the items are concatenated together separated by a newline.",
    "jar<d_unittest>" : "When set to true, the D modules are compiled in debug mode.",
    "executable<objc_args>" : "Compiler flags for Objective-C",
    "meson.project_name" : "Returns the project name specified in the project() function call.",
    "compiler.compiles<dependencies>" : "Additionally dependencies required for compiling and \/ or linking.",
    "static_library<c_pch>" : "Precompiled header file to use for C",
    "static_library<name_suffix>" : "The string that will be used as the extension for the target by overriding the default. By default on Windows this is exe for executables and on other platforms it is omitted.",
    "meson.backend" : "Returns a string representing the current backend.",
    "dependency<required>" : "When set to false, Meson will proceed with the build even if the dependency is not found.\n\nWhen set to a feature option, the feature will control if it is searched and whether to fail if not found.",
    "subproject<version>" : "Specifies the required version, a string containing a comparison operator followed by the version string.",
    "fs_module.name" : "Returns the last component of the path (i.e. basename).",
    "cmake_subprojectoptions.add_cmake_defines" : "Add additional CMake commandline defines",
    "executable<build_rpath>" : "A string to add to target's rpath definition in the build dir, but which will be removed on install",
    "compiler.has_header<no_builtin_args>" : "When set to true, the compiler arguments controlled by built-in configuration options are not added.",
    "compiler.get_supported_arguments" : "Returns an array containing only the arguments supported by the compiler, as if `compiler.has_argument()` were called on them individually.",
    "shared_library<cs_args>" : "Compiler flags for C#",
    "shared_library<c_pch>" : "Precompiled header file to use for C",
    "str.startswith" : "Returns true if string starts with the string specified as the argument.",
    "jar<d_args>" : "Compiler flags for D",
    "build_target<gui_app>" : "When set to true flags this target as a GUI application on platforms where this makes a differerence, deprecated since 0.56.0, use win_subsystem instead.",
    "library<masm_args>" : "Compiler flags for MASM",
    "dep.partial_dependency<includes>" : "Whether to include includes",
    "feature.disabled" : "Returns whether the feature was set to 'disabled'",
    "feature.require<error_message>" : "The error Message to print if the check fails",
    "executable<d_import_dirs>" : "List of directories to look in for string imports used in the D programming language.",
    "build_target<c_pch>" : "Precompiled header file to use for C",
    "summary<section>" : "The section to put this summary information under. If the section keyword argument is omitted, key\/value pairs are implicitly grouped into a section with no title.",
    "static_library<include_directories>" : "One or more objects created with the include_directories() function, or (since 0.50.0) strings, which will be transparently expanded to include directory objects",
    "python_installation.path" : "Works like the path method of other `ExternalProgram` objects.",
    "cmake_subprojectoptions.set_install" : "Override whether targets should be installed or not",
    "shared_module<d_debug>" : "The D version identifiers to add during the compilation of D source files.",
    "shared_library<include_directories>" : "One or more objects created with the include_directories() function, or (since 0.50.0) strings, which will be transparently expanded to include directory objects",
    "configure_file<configuration>" : "Configuration to apply to input",
    "custom_target<install_dir>" : "The subdirectory to install the output to",
    "library<cython_args>" : "Compiler flags for Cython",
    "shared_module<vs_module_defs>" : "Specify a Microsoft module definition file for controlling symbol exports, etc., on platforms where that is possible (e.g. Windows).",
    "install_emptydir<install_tag>" : "A string used by the meson install --tags command to install only a subset of the files. By default these files have no install tag which means they are not being installed when --tags argument is specified.",
    "run_command<env>" : "Environment variables to set",
    "shared_library<build_rpath>" : "A string to add to target's rpath definition in the build dir, but which will be removed on install",
    "meson.add_dist_script" : "Causes the script given as argument to run during dist operation after the distribution source has been generated but before it is archived.",
    "shared_library<implicit_include_directories>" : "Controls whether Meson adds the current source and build directories to the include path",
    "jar<link_language>" : "Makes the linker for this target be for the specified language. It is generally unnecessary to set this, as Meson will detect the right linker to use in most cases. There are only two cases where this is needed. One, your main function in an executable is not in the language Meson picked, or second you want to force a library to use only one ABI.",
    "dependency" : "Finds an external dependency.",
    "compiler.has_header<required>" : "When set to true, Meson will halt if the header check fails. When set to a feature option, the feature will control if it is searched and whether to fail if not found.",
    "custom_target<depends>" : "Specifies that this target depends on the specified target(s), even though it does not take any of them as a command line argument. This is meant for cases where you have a tool that e.g. does globbing internally. Usually you should just put the generated sources as inputs and Meson will set up all dependencies automatically.",
    "int.is_odd" : "Returns true if the number is odd.",
    "build_target<d_module_versions>" : "List of module version identifiers set when compiling D sources.",
    "find_program<native>" : "Defines how this executable should be searched. By default it is set to false, which causes Meson to first look for the executable in the cross file (when cross building) and if it is not defined there, then from the system. If set to true, the cross file is ignored and the program is only searched from the system.",
    "jar<link_depends>" : "Strings, files, or custom targets the link step depends on such as a symbol visibility map. The purpose is to automatically trigger a re-link (but not a re-compile) of the target when this file changes.",
    "build_target<cs_args>" : "Compiler flags for C#",
    "configure_file<output_format>" : "The format of the output to generate when no input",
    "both_libraries<link_args>" : "Flags to use during linking. You can use UNIX-style flags here for all platforms.",
    "build_target<target_type>" : "The actual target to build",
    "compiler.first_supported_link_argument" : "Given a list of strings, returns the first argument that passes the `compiler.has_link_argument()` test or an empty array if none pass.",
    "qt4_module.has_tools" : "This method returns true if all tools used by this module are found, false otherwise. It should be used to compile optional Qt code",
    "static_library<nasm_args>" : "Compiler flags for NASM",
    "install_symlink" : "Installs a symbolic link to `pointing_to` target under `install_dir`.",
    "error" : "Print the argument string and halts the build process.",
    "env.prepend" : "Same as `env.append()` except that it writes to the beginning of the variable.",
    "static_library<dependencies>" : "One or more dependency objects",
    "declare_dependency<link_args>" : "Link arguments to use.",
    "executable<link_args>" : "Flags to use during linking. You can use UNIX-style flags here for all platforms.",
    "shared_module<cython_args>" : "Compiler flags for Cython",
    "both_libraries<darwin_versions>" : "Defines the compatibility version and current version for the dylib on macOS. If a list is specified, it must be either zero, one, or two elements. If only one element is specified or if it's not a list, the specified value will be used for setting both compatibility version and current version. If unspecified, the soversion will be used as per the aforementioned rules.",
    "install_subdir<exclude_directories>" : "A list of directory names that should not be installed. Names are interpreted as paths relative to the subdir_name location.",
    "meson.get_cross_property" : "Returns the given property from a cross file, the optional `fallback_value` is returned if not cross compiling or the given property is not found.",
    "executable<name_suffix>" : "The string that will be used as the extension for the target by overriding the default. By default on Windows this is exe for executables and on other platforms it is omitted.",
    "list.length" : "Returns the value of the number as a string.",
    "compiler.check_header" : "Returns true if the specified header is usable with the specified prefix, dependencies, and arguments.",
    "fs_module.is_absolute" : "Return a boolean indicating if the path string or `files()` specified is absolute, WITHOUT expanding `~`.",
    "configure_file<format>" : "The format of defines",
    "compiler.has_function<no_builtin_args>" : "When set to true, the compiler arguments controlled by built-in configuration options are not added.",
    "jar<gnu_symbol_visibility>" : "Specifies how symbols should be exported: default\/internal\/hidden\/protected\/inlineshidden",
    "compiler.has_member<include_directories>" : "Extra directories for header searches.",
    "library<dependencies>" : "One or more dependency objects",
    "static_library<build_rpath>" : "A string to add to target's rpath definition in the build dir, but which will be removed on install",
    "find_program<dirs>" : "Extra list of absolute paths where to look for program names.",
    "executable<include_directories>" : "One or more objects created with the include_directories() function, or (since 0.50.0) strings, which will be transparently expanded to include directory objects",
    "add_test_setup<exe_wrapper>" : "The command or script followed by the arguments to it",
    "import<disabler>" : "Returns a disabler object when not found.",
    "custom_target<env>" : "Environment variables to set",
    "meson.get_external_property<native>" : "Setting `native` to `true` forces retrieving a variable from the native file, even when cross-compiling.",
    "gnome_module.gtkdoc_html_dir" : "Takes as argument a module name and returns the path where that module's HTML files will be installed. Usually used with `install_data` to install extra files, such as images, to the output directory.",
    "compiler.has_members<include_directories>" : "Extra directories for header searches.",
    "jar<vala_args>" : "Compiler flags for Vala",
    "executable<d_args>" : "Compiler flags for D",
    "subdir_done" : "Stops further interpretation of the Meson script file from the point of the invocation. All steps executed up to this point are valid and will be executed by Meson. This means that all targets defined before the call of subdir_done() will be build.",
    "str.underscorify" : "Creates a string where every non-alphabetical non-number character is replaced with _.",
    "hotdoc_module.generate_doc" : "Generates documentation using hotdoc and installs it into `$prefix\/share\/doc\/html`.",
    "shared_library<darwin_versions>" : "Defines the compatibility version and current version for the dylib on macOS. If a list is specified, it must be either zero, one, or two elements. If only one element is specified or if it's not a list, the specified value will be used for setting both compatibility version and current version. If unspecified, the soversion will be used as per the aforementioned rules.",
    "qt4_module.compile_resources" : "Compiles Qt's resources collection files (.qrc) into c++ files for compilation.",
    "benchmark<suite>" : "Label of benchmark",
    "executable<cpp_args>" : "Compiler flags for C++",
    "summary<list_sep>" : "The separator to use when printing list values in this summary. If no separator is given, each list item will be printed on its own line.",
    "shared_module<native>" : "Controls whether the target is compiled for the build or host machines.",
    "shared_library<soversion>" : "A string or integer specifying the soversion of this shared library, such as 0. On Linux and Windows this is used to set the soversion (or equivalent) in the filename. For example, if soversion is 4, a Windows DLL will be called foo-4.dll and one of the aliases of the Linux shared library would be libfoo.so.4. If this is not specified, the first part of version is used instead (see below). For example, if version is 3.6.0 and soversion is not defined, it is set to 3.",
    "static_library<gui_app>" : "When set to true flags this target as a GUI application on platforms where this makes a differerence, deprecated since 0.56.0, use win_subsystem instead.",
    "executable<install>" : "When set to true, this executable should be installed.",
    "qt4_module.compile_translations" : "This method generates the necessary targets to build translation files with lrelease.",
    "shared_library<sources>" : "Additional source files. Same as the source varargs.",
    "python3_module.extension_module" : "Creates a `shared_module` target that is named according to the naming conventions of the target platform.",
    "i18n_module.merge_file" : "This merges translations into a text file using msgfmt.",
    "jar<name_suffix>" : "The string that will be used as the extension for the target by overriding the default. By default on Windows this is exe for executables and on other platforms it is omitted.",
    "shared_library<objcpp_args>" : "Compiler flags for Objective-C++",
    "compiler.run<dependencies>" : "Additionally dependencies required for compiling and \/ or linking.",
    "run_target<command>" : "A list containing the command to run and the arguments to pass to it.",
    "dep.partial_dependency<links>" : "Whether to include links",
    "configure_file<install_tag>" : "A string used by the `meson install --tags` command",
    "install_headers<install_mode>" : "Specify the file mode in symbolic format and optionally the owner\/uid and group\/gid for the installed files.",
    "external_pogram.version" : "The version number as a string.",
    "add_project_dependencies<native>" : "A boolean specifying whether the arguments should be",
    "find_program<version>" : "Specifies the required version",
    "fs_module.read" : "Returns a string with the contents of the given path. If encoding is not given, UTF-8 is assumed.",
    "compiler.compiles<name>" : "The name to use for printing a message about the compiler check. If this keyword argument is not passed, no message will be printed about the check.",
    "shared_module<cpp_pch>" : "Precompiled header file to use for C++",
    "static_library<rust_crate_type>" : "Set the specific type of rust crate to compile (when compiling rust).",
    "runresult.stderr" : "The standard error produced when the command was run.",
    "both_libraries<c_args>" : "Compiler flags for C",
    "compiler.preprocess<include_directories>" : "Extra directories for header searches.",
    "both_libraries<fortran_args>" : "Compiler flags for Fortran",
    "meson.override_dependency<native>" : "If set to true, the dependency is always overwritten for the build machine. Otherwise, the dependency is overwritten for the host machine, which differs from the build machine when cross-compiling.",
    "meson.add_install_script<install_tag>" : "A string used by the meson install --tags command to install only a subset of the files. By default the script has no install tag which means it is not being run when meson install --tags argument is specified.",
    "shared_module<gnu_symbol_visibility>" : "Specifies how symbols should be exported: default\/internal\/hidden\/protected\/inlineshidden",
    "test<should_fail>" : "When true the test is considered passed if the executable returns a non-zero return value (i.e. reports an error)",
    "install_subdir<install_tag>" : "A string used by the meson install --tags command to install only a subset of the files. By default these files have no install tag which means they are not being installed when --tags argument is specified.",
    "build_target<implib>" : "When set to true, an import library is generated for the executable (the name of the import library is based on exe_name). Alternatively, when set to a string, that gives the base name for the import library. The import library is used when the returned build target object appears in link_with: elsewhere. Only has any effect on platforms where that is meaningful (e.g. Windows). Implies the export_dynamic argument.",
    "custom_idx.full_path" : "Returns a full path pointing to the result target file NOTE: In most cases using the object itself will do the same job as this and will also allow Meson to setup inter-target dependencies correctly. Please file a bug if that doesn't work for you.",
    "cfg_data.keys" : "Returns an array of keys of the configuration data object.",
    "cmake_subproject.target_type" : "Returns the type of the target as string",
    "vcs_tag<output>" : "File to write the results to",
    "compiler.compiles<include_directories>" : "Extra directories for header searches.",
    "jar<include_directories>" : "One or more objects created with the include_directories() function, or (since 0.50.0) strings, which will be transparently expanded to include directory objects",
    "shared_module<link_depends>" : "Strings, files, or custom targets the link step depends on such as a symbol visibility map. The purpose is to automatically trigger a re-link (but not a re-compile) of the target when this file changes.",
    "cfg_data.set10" : "Is the same as `cfg_data.set()` but the value is either true or false and will be written as 1 or 0, respectively",
    "compiler.find_library<has_headers>" : "List of headers that must be found as well. This check is equivalent to checking each header with a compiler.has_header() call.",
    "gnome_module.yelp" : "Installs help documentation for Yelp using itstool and gettext. The first argument is the project id.",
    "shared_library<cpp_args>" : "Compiler flags for C++",
    "static_library<install_rpath>" : "A string to set the target's rpath to after install (but not before that). On Windows, this argument has no effect.",
    "jar<fortran_args>" : "Compiler flags for Fortran",
    "i18n_module.gettext" : "Sets up gettext localisation so that translations are built and placed into their proper locations during install. Takes one positional argument which is the name of the gettext module.",
    "environment" : "Returns an empty `env` object.",
    "cuda_module.min_driver_version" : "Returns the minimum NVIDIA proprietary driver version required, on the host system, by kernels compiled with a CUDA Toolkit with the given version string.\nThe output of this function is generally intended for informative message printing, but could be used for assertions or to conditionally enable features known to exist within the minimum NVIDIA driver required.",
    "compiler.compute_int<args>" : "Used to pass a list of compiler arguments. Defining include paths for headers not in the default include path via -Isome\/path\/to\/header is generally supported, however, usually not recommended.",
    "warning" : "This function prints its argument to stdout prefixed with WARNING:.",
    "structured_sources" : "Create a StructuredSource object, which is opaque and may be passed as a source to any build_target (including static_library, shared_library, executable, etc.). This is useful for languages like Rust, which use the filesystem layout to determine import names. This is only allowed in Rust targets, and cannot be mixed with non structured inputs.",
    "library<sources>" : "Additional source files. Same as the source varargs.",
    "generator" : "This function creates a `generator` object that can be used to run custom compilation commands.",
    "compiler.sizeof<dependencies>" : "Additionally dependencies required for compiling and \/ or linking.",
    "compiler.has_header_symbol<dependencies>" : "Additionally dependencies required for compiling and \/ or linking.",
    "static_library<extra_files>" : "Not used for the build itself but are shown as source files in IDEs that group files by targets (such as Visual Studio)",
    "jar<dependencies>" : "One or more dependency objects",
    "jar<install_mode>" : "Specify the file mode in symbolic format and optionally the owner\/uid and group\/gid for the installed files.",
    "build_target<link_language>" : "Makes the linker for this target be for the specified language. It is generally unnecessary to set this, as Meson will detect the right linker to use in most cases. There are only two cases where this is needed. One, your main function in an executable is not in the language Meson picked, or second you want to force a library to use only one ABI.",
    "simd_module.check" : "This module is designed for the use case where you have an algorithm with one or more SIMD implementation and you choose which one to use at runtime.",
    "both_libraries<soversion>" : "A string or integer specifying the soversion of this shared library, such as 0. On Linux and Windows this is used to set the soversion (or equivalent) in the filename. For example, if soversion is 4, a Windows DLL will be called foo-4.dll and one of the aliases of the Linux shared library would be libfoo.so.4. If this is not specified, the first part of version is used instead (see below). For example, if version is 3.6.0 and soversion is not defined, it is set to 3.",
    "cmake_subproject.target_list" : "Returns a list of all target names",
    "compiler.version" : "Returns the compiler's version number as a string.",
    "build_target<pic>" : "Builds the library as positional independent code (so it can be linked into a shared library). This option has no effect on Windows and OS X since it doesn't make sense on Windows and PIC cannot be disabled on OS X.",
    "cmake_module.write_basic_package_version_file<arch_independent>" : "If true the generated package file will skip architecture checks. Useful for header-only libraries.",
    "build_target<gnu_symbol_visibility>" : "Specifies how symbols should be exported: default\/internal\/hidden\/protected\/inlineshidden",
    "generator<depends>" : "An array of build targets that must be built before this generator can be run. This is used if you have a generator that calls a second executable that is built in this project.",
    "jar<install>" : "When set to true, this executable should be installed.",
    "static_library<d_module_versions>" : "List of module version identifiers set when compiling D sources.",
    "library<soversion>" : "A string or integer specifying the soversion of this shared library, such as 0. On Linux and Windows this is used to set the soversion (or equivalent) in the filename. For example, if soversion is 4, a Windows DLL will be called foo-4.dll and one of the aliases of the Linux shared library would be libfoo.so.4. If this is not specified, the first part of version is used instead (see below). For example, if version is 3.6.0 and soversion is not defined, it is set to 3.",
    "external_program.full_path" : "Returns a string pointing to the script or executable.",
    "meson.current_build_dir" : "Returns a string with the absolute path to the current build directory.",
    "executable<link_language>" : "Makes the linker for this target be for the specified language. It is generally unnecessary to set this, as Meson will detect the right linker to use in most cases. There are only two cases where this is needed. One, your main function in an executable is not in the language Meson picked, or second you want to force a library to use only one ABI.",
    "meson.project_license" : "Returns the array of licenses specified in project() function call.",
    "both_libs.get_static_lib" : "Returns the stored static library",
    "shared_library<link_language>" : "Makes the linker for this target be for the specified language. It is generally unnecessary to set this, as Meson will detect the right linker to use in most cases. There are only two cases where this is needed. One, your main function in an executable is not in the language Meson picked, or second you want to force a library to use only one ABI.",
    "library<version>" : "A string specifying the version of this shared library, such as 1.1.0. On Linux and OS X, this is used to set the shared library version in the filename, such as libfoo.so.1.1.0 and libfoo.1.1.0.dylib. If this is not specified, soversion is used instead.",
    "executable<nasm_args>" : "Compiler flags for NASM",
    "compiler.has_members" : "Returns true if the type has *all* the specified members.",
    "both_libraries<objc_args>" : "Compiler flags for Objective-C",
    "library<implicit_include_directories>" : "Controls whether Meson adds the current source and build directories to the include path",
    "run_command<capture>" : "If true, any output generated on stdout will be captured and returned by the .stdout() method. If it is false, then .stdout() will return an empty string.",
    "meson.override_dependency" : "Specifies that whenever `dependency()` with `name` is used, Meson should not look it up on the system but instead return `dep_object`, which may either be the result of `dependency()` or `declare_dependency()`.",
    "compiler.first_supported_argument" : "Given a list of strings, returns a single-element list containing the first argument that passes the `compiler.has_argument()` test or an empty array if none pass.",
    "custom_target<console>" : "Keyword argument conflicts with capture, and is meant for commands that are resource-intensive and take a long time to finish",
    "env.set<separator>" : "The separator to use. If not explicitly specified, the default path separator for the host operating system will be used, i.e. ';' for Windows and ':' for UNIX\/POSIX systems.",
    "find_program<disabler>" : "If true and the program couldn't be found, return a disabler object instead of a not-found object.",
    "compiler.alignment<args>" : "Used to pass a list of compiler arguments. Defining include paths for headers not in the default include path via -Isome\/path\/to\/header is generally supported, however, usually not recommended.",
    "dependency<include_type>" : "An enum flag, marking how the dependency flags should be converted. Supported values are 'preserve', 'system' and 'non-system'. System dependencies may be handled differently on some platforms, for instance, using -isystem instead of -I, where possible. If include_type is set to 'preserve', no additional conversion will be performed.",
    "generator<output>" : "Template string (or list of template strings) defining how an output file name is (or multiple output names are) generated from a single source file name.",
    "str.join" : "The opposite of split, for example `'.'.join(['a', 'b', 'c']` yields `a.b.c`.",
    "hotdoc_module.has_extensions" : "Returns true if all the extensions where found, false otherwise.",
    "custom_target<install_tag>" : "A list of strings, one per output, used by the `meson install --tags` command to install only a subset of the files.",
    "benchmark<workdir>" : "Absolute path that will be used as the working directory",
    "library<objcpp_args>" : "Compiler flags for Objective-C++",
    "both_libraries<pic>" : "Builds the library as positional independent code (so it can be linked into a shared library). This option has no effect on Windows and OS X since it doesn't make sense on Windows and PIC cannot be disabled on OS X.",
    "meson.build_root" : "Returns a string with the absolute path to the build root directory.",
    "install_data<install_tag>" : "A string used by the meson install --tags command to install only a subset of the files. By default these files have no install tag which means they are not being installed when --tags argument is specified.",
    "subproject().get_variable" : "Fetches the specified variable from inside the subproject.",
    "shared_library<cpp_pch>" : "Precompiled header file to use for C++",
    "static_library<link_language>" : "Makes the linker for this target be for the specified language. It is generally unnecessary to set this, as Meson will detect the right linker to use in most cases. There are only two cases where this is needed. One, your main function in an executable is not in the language Meson picked, or second you want to force a library to use only one ABI.",
    "shared_module" : "Builds a shared module with the given sources.",
    "compiler.symbols_have_underscore_prefix" : "Returns true if the C symbol mangling is one underscore (`_`) prefixed to the symbol.",
    "shared_module<override_options>" : "takes an array of strings in the same format as project's `default_options` overriding the values of these options for this target only.",
    "executable<install_dir>" : "Override install directory for this file. If the value is a relative path, it will be considered relative the prefix option",
    "library<link_with>" : "One or more shared or static libraries (built by this project) that this target should be linked with. (since 0.41.0) If passed a list this list will be flattened. (since 0.51.0) The arguments can also be custom targets. In this case Meson will assume that merely adding the output file in the linker command line is sufficient to make linking work. If this is not sufficient, then the build system writer must write all other steps manually.",
    "shared_library" : "Builds a shared library with the given sources.",
    "fs_module.is_symlink" : "Takes a single string of `files()` argument and returns true if the path pointed to by the string is a symbolic link",
    "compiler.has_header<args>" : "Used to pass a list of compiler arguments. Defining include paths for headers not in the default include path via -Isome\/path\/to\/header is generally supported, however, usually not recommended.",
    "pkgconfig_module.generate" : "This function generates a pkgconfig file for the given library",
    "sourceset.add" : "Add a rule to a source set. A rule determines the conditions under which some source files or dependency objects are included in a build configuration.",
    "compiler.has_multi_link_arguments" : "The same as `compiler.has_link_argument()` but takes multiple arguments and uses them all in a single compiler invocation.",
    "meson.add_devenv<separator>" : "The separator to use for the initial values defined in the first positional argument. If not explicitly specified, the default path separator for the host operating system will be used, i.e. ';' for Windows and ':' for UNIX\/POSIX systems.",
    "shared_library<vala_args>" : "Compiler flags for Vala",
    "custom_target<depend_files>" : "Files (str, file, or the return value of configure_file() that this target depends on but are not listed in the command keyword argument. Useful for adding regen dependencies.",
    "executable<masm_args>" : "Compiler flags for MASM",
    "meson.global_source_root" : "Returns a string with the absolute path to the source root directory This function will return the source root of the main project if called from a subproject, which is usually not what you want.",
    "compiler.links<dependencies>" : "Additionally dependencies required for compiling and \/ or linking.",
    "both_libraries<link_depends>" : "Strings, files, or custom targets the link step depends on such as a symbol visibility map. The purpose is to automatically trigger a re-link (but not a re-compile) of the target when this file changes.",
    "meson.get_external_property" : "Returns the given property from a native or cross file. The optional `fallback_value` is returned if the given property is not found.",
    "jar<implicit_include_directories>" : "Controls whether Meson adds the current source and build directories to the include path",
    "build_machine.cpu_family" : "Returns the CPU family name.",
    "static_library<d_unittest>" : "When set to true, the D modules are compiled in debug mode.",
    "both_libraries<cython_args>" : "Compiler flags for Cython",
    "benchmark<verbose>" : "If true, forces the test results to be logged as if `--verbose` was passed",
    "shared_module<nasm_args>" : "Compiler flags for NASM",
    "shared_module<name_prefix>" : "The string that will be used as the prefix for the target output filename by overriding the default (only used for libraries). By default this is lib on all platforms and compilers, except for MSVC shared libraries where it is omitted to follow convention, and Cygwin shared libraries where it is cyg.",
    "jar<cpp_pch>" : "Precompiled header file to use for C++",
    "fs_module.stem" : "Returns the last component of the path, dropping the last part of the suffix",
    "add_global_link_arguments" : "Add global arguments to the linker command line.",
    "test<is_parallel>" : "When false, specifies that no other test must be running at the same time as this test",
    "meson.can_run_host_binaries" : "Returns true if the build machine can run binaries compiled for the host.",
    "compiler.has_type<no_builtin_args>" : "When set to true, the compiler arguments controlled by built-in configuration options are not added.",
    "both_libs.get_shared_lib" : "Returns the stored shared library",
    "external_program.path" : "Returns a string pointing to the script or executable.",
    "compiler.find_library<required>" : "If set true, Meson will abort with an error if the library could not be found. Otherwise, Meson will continue and the found method of the returned object will return false.",
    "compiler.alignment" : "Returns the alignment of the specified type.",
    "shared_library<objects>" : "List of object files that should be linked in this target.",
    "java_module.native_headers" : "This function will generate native header files for use in Java native module development by reading the supplied Java files for native method declarations.",
    "cmake_module.configure_package_config_file<name>" : "The name of the package",
    "install_data<preserve_path>" : "Disable stripping child-directories from data files when installing.",
    "cmake_subproject.get_variable" : "Fetches the specified variable from inside the subproject",
    "compiler.has_type<include_directories>" : "Extra directories for header searches.",
    "library<install_mode>" : "Specify the file mode in symbolic format and optionally the owner\/uid and group\/gid for the installed files.",
    "shared_module<install_dir>" : "Override install directory for this file. If the value is a relative path, it will be considered relative the prefix option",
    "add_test_setup<gdb>" : "If `true`, the tests are also run under `gdb`",
    "install_emptydir" : "Installs a new directory entry to the location specified by the positional argument. If the directory exists and is not empty, the contents are left in place.",
    "shared_library<c_args>" : "Compiler flags for C",
    "shared_module<install_tag>" : "A string used by the `meson install --tags` command to install only a subset of the files. By default all build targets have the tag runtime except for static libraries that have the devel tag.",
    "jar" : "Build a jar from the specified Java source files.",
    "build_target<nasm_args>" : "Compiler flags for NASM",
    "custom_target<depfile>" : "A dependency file that the command can write listing all the additional files this target depends on, for example a C compiler would list all the header files it included, and a change in any one of these files triggers a recompilation.",
    "executable" : "Creates a new executable. The first argument specifies its name and the remaining positional arguments define the input files to use.",
    "build_tgt.private_dir_include" : "Returns a value that works like `include_directories()`, but points to the private directory of this target. Usually only needed if an another target needs to access some generated internal headers of this target.",
    "jar<sources>" : "Additional source files. Same as the source varargs.",
    "both_libraries<cpp_args>" : "Compiler flags for C++",
    "dep.get_variable<pkgconfig>" : "The pkgconfig variable name",
    "dep.partial_dependency<compile_args>" : "Whether to include compile_args",
    "subproject<required>" : "When set to false, Meson will proceed with the build even if the dependency is not found.\n\nWhen set to a feature option, the feature will control if it is searched and whether to fail if not found.\n\nThe value of a feature option can also be passed..",
    "jar<cs_args>" : "Compiler flags for C#",
    "vcs_tag<input>" : "File to modify",
    "compiler.links<name>" : "The name to use for printing a message about the compiler check. If this keyword argument is not passed, no message will be printed about the check.",
    "compiler.find_library<dirs>" : "Additional directories to search in.",
    "vcs_tag<fallback>" : "Version number to use when no revision control information is present, such as when building from a release tarball.",
    "compiler.has_member<dependencies>" : "Additionally dependencies required for compiling and \/ or linking.",
    "compiler.get_linker_id" : "Returns a string identifying the linker.",
    "build_machine.system" : "Returns the operating system name.",
    "install_data" : "Installs files from the source tree that are listed as positional arguments.",
    "both_libraries<install_dir>" : "Override install directory for this file. If the value is a relative path, it will be considered relative the prefix option",
    "meson.is_unity" : "Returns true when doing a unity build (multiple sources are combined before compilation to reduce build time) and false otherwise.",
    "dependency<disabler>" : "Returns a disabler() object instead of a not-found dependency if this kwarg is set to true and the dependency couldn't be found.",
    "compiler.has_argument" : "Returns true if the compiler accepts the specified command line argument, that is, can compile code without erroring out or printing a warning about an unknown flag.",
    "shared_library<objc_args>" : "Compiler flags for Objective-C",
    "library<vs_module_defs>" : "Specify a Microsoft module definition file for controlling symbol exports, etc., on platforms where that is possible (e.g. Windows).",
    "declare_dependency<d_import_dirs>" : "the directories to add to the string search path (i.e. -J switch for DMD). Must be inc objects or plain strings.",
    "compiler.has_function<args>" : "Used to pass a list of compiler arguments. Defining include paths for headers not in the default include path via -Isome\/path\/to\/header is generally supported, however, usually not recommended.",
    "java_module.generate_native_headers" : "This function will generate native header files for use in Java native module development by reading the supplied Java files for native method declarations.",
    "static_library<objcpp_args>" : "Compiler flags for Objective-C++",
    "add_languages" : "Add programming languages used by the project.",
    "is_variable" : "Returns true if a variable of the given name exists and false otherwise.",
    "sourcefiles.sources" : "Return the source files corresponding to the applied configuration.",
    "benchmark<should_fail>" : "When true the test is considered passed if the executable fails",
    "static_library<native>" : "Controls whether the target is compiled for the build or host machines.",
    "static_library" : "Builds a static library with the given sources.",
    "feature.allowed" : "Returns whether the feature was set to 'enabled' or 'auto'",
    "shared_library<nasm_args>" : "Compiler flags for NASM",
    "summary<bool_yn>" : "Convert bool values to yes and no",
    "library<link_depends>" : "Strings, files, or custom targets the link step depends on such as a symbol visibility map. The purpose is to automatically trigger a re-link (but not a re-compile) of the target when this file changes.",
    "i18n_module.itstool_join" : "This joins translations into a XML file using itstool.",
    "shared_module<extra_files>" : "Not used for the build itself but are shown as source files in IDEs that group files by targets (such as Visual Studio)",
    "build_target<install_tag>" : "A string used by the `meson install --tags` command to install only a subset of the files. By default all build targets have the tag runtime except for static libraries that have the devel tag.",
    "test<verbose>" : "If true, forces the test results to be logged as if --verbose was passed to meson test.",
    "wayland_module.find_protocol" : "Find an XML file for the protocol with the given state and version",
    "library<build_rpath>" : "A string to add to target's rpath definition in the build dir, but which will be removed on install",
    "dlang_module.generate_dub_file" : "Used to automatically generate Dub configuration files.",
    "test<args>" : "Arguments to pass to the executable",
    "build_target<fortran_args>" : "Compiler flags for Fortran",
    "static_library<install_tag>" : "A string used by the `meson install --tags` command to install only a subset of the files. By default all build targets have the tag runtime except for static libraries that have the devel tag.",
    "build_target<rust_crate_type>" : "Set the specific type of rust crate to compile (when compiling rust).",
    "shared_module<fortran_args>" : "Compiler flags for Fortran",
    "qt4_module.compile_ui" : "Compiles Qt's ui files (.ui) into header files.",
    "benchmark<env>" : "Environment variables to set",
    "both_libraries<d_import_dirs>" : "List of directories to look in for string imports used in the D programming language.",
    "install_symlink<install_dir>" : "The absolute or relative path to the installation directory for the links. If this is a relative path, it is assumed to be relative to the prefix.",
    "shared_library<vs_module_defs>" : "Specify a Microsoft module definition file for controlling symbol exports, etc., on platforms where that is possible (e.g. Windows).",
    "shared_module<vala_args>" : "Compiler flags for Vala",
    "shared_library<fortran_args>" : "Compiler flags for Fortran",
    "sourceset.add_all" : "Add one or more source sets to another.",
    "install_headers<subdir>" : "Install to the subdir subdirectory of the default includedir.",
    "run_target" : "This function creates a new top-level target that runs a specified command with the specified arguments.",
    "executable<cs_args>" : "Compiler flags for C#",
    "build_target<override_options>" : "takes an array of strings in the same format as project's `default_options` overriding the values of these options for this target only.",
    "both_libraries<install_mode>" : "Specify the file mode in symbolic format and optionally the owner\/uid and group\/gid for the installed files.",
    "dep.get_pkgconfig_variable<define_variable>" : "You can also redefine a variable by passing a list to this kwarg that can affect the retrieved variable: `['prefix', '\/'])`.",
    "compiler.has_member<args>" : "Used to pass a list of compiler arguments. Defining include paths for headers not in the default include path via -Isome\/path\/to\/header is generally supported, however, usually not recommended.",
    "alias_target" : "This function creates a new top-level target. Like all top-level targets, this integrates with the selected backend. For instance, with you can run it as `meson compile target_name`. This is a dummy target that does not execute any command, but ensures that all dependencies are built. Dependencies can be any build target (e.g. return value of `executable()`, `custom_target()`, etc)",
    "static_library<install_mode>" : "Specify the file mode in symbolic format and optionally the owner\/uid and group\/gid for the installed files.",
    "build_target<vala_args>" : "Compiler flags for Vala",
    "both_libraries<install>" : "When set to true, this executable should be installed.",
    "get_variable" : "This function can be used to dynamically obtain a variable. `res = get_variable(varname, fallback)` takes the value of varname (which must be a string) and stores the variable of that name into res. If the variable does not exist, the variable fallback is stored to resinstead. If a fallback is not specified, then attempting to read a non-existing variable will cause a fatal error.",
    "fs_module.is_file" : "Takes a single string argument and returns true if an file with that name exists on the file system.",
    "str.split" : "Splits the string at the specified character (or whitespace if not set) and returns the parts in an array.",
    "compiler.get_supported_link_arguments" : "Returns an array containing only the arguments supported by the compiler, as if `compiler.has_link_argument()` were called on them individually.",
    "build_tgt.found" : "Always returns true. This function is meant to make executables objects feature compatible with `external_program` objects. This simplifies use-cases where an executable is used instead of an `external_program`.",
    "sourceset_module.source_set" : "Create and return a new source set object.",
    "python_installation.language_version" : "Get the major.minor python version, eg `2.7`.",
    "static_library<rust_args>" : "Compiler flags for Rust",
    "install_data<rename>" : "If specified renames each source file into corresponding file from rename list.",
    "jar<objc_args>" : "Compiler flags for Objective-C",
    "build_machine.endian" : "Returns 'big' on big-endian systems and 'little' on little-endian systems.",
    "dependency<default_options>" : "An array of default option values that override those set in the subproject's meson_options.txt",
    "compiler.get_define<prefix>" : "Used to add `#include`s and other things that are required for the symbol to be declared. Since 1.0.0 an array is accepted too. When an array is passed, the items are concatenated together separated by a newline.",
    "cmake_subprojectoptions.clear" : "Resets all data in the object",
    "compiler.compiles<args>" : "Used to pass a list of compiler arguments. Defining include paths for headers not in the default include path via -Isome\/path\/to\/header is generally supported, however, usually not recommended.",
    "cmake_subproject.found" : "Returns true if the subproject is available, otherwise false",
    "custom_target<capture>" : "There are some compilers that can't be told to write their output to a file but instead write it to standard output. When this argument is set to true, Meson captures stdout and writes it to the target file. Note that your command argument list may not contain @OUTPUT@ when capture mode is active.",
    "both_libraries<name_suffix>" : "The string that will be used as the extension for the target by overriding the default. By default on Windows this is exe for executables and on other platforms it is omitted.",
    "gnome_module.post_install" : "Post-install update of various system wide caches.",
    "compiler.get_define<dependencies>" : "Additionally dependencies required for compiling and \/ or linking.",
    "qt4_module.compile_moc" : "Compiles Qt's moc files (.moc) into header and\/or source files.",
    "build_tgt.extract_all_objects<recursive>" : "Also return objects passed to the `objects` argument of this target.",
    "library<fortran_args>" : "Compiler flags for Fortran",
    "meson" : "The meson object allows you to introspect various properties of the system.",
    "static_library<prelink>" : "If true the object files in the target will be prelinked, meaning that it will contain only one prelinked object file rather than the individual object files.",
    "compiler.get_supported_arguments<checked>" : "off\/warn\/require",
    "compiler.has_header_symbol" : "Detects whether a particular symbol is declared in the specified header.",
    "compiler.has_function<dependencies>" : "Additionally dependencies required for compiling and \/ or linking.",
    "library<d_unittest>" : "When set to true, the D modules are compiled in debug mode.",
    "range" : "Return an opaque object that can be only be used in foreach statements.",
    "library<gnu_symbol_visibility>" : "Specifies how symbols should be exported: default\/internal\/hidden\/protected\/inlineshidden",
    "generator.process<preserve_path_from>" : "If given, specifies that the output files need to maintain their directory structure inside the target temporary directory.",
    "shared_library<name_suffix>" : "The string that will be used as the extension for the target by overriding the default. By default on Windows this is exe for executables and on other platforms it is omitted.",
    "compiler.check_header<dependencies>" : "Additionally dependencies required for compiling and \/ or linking.",
    "jar<link_args>" : "Flags to use during linking. You can use UNIX-style flags here for all platforms.",
    "compiler.has_header_symbol<no_builtin_args>" : "When set to true, the compiler arguments controlled by built-in configuration options are not added.",
    "build_target<name_suffix>" : "The string that will be used as the extension for the target by overriding the default. By default on Windows this is exe for executables and on other platforms it is omitted.",
    "fs_module.is_samepath" : "Returns true, if both paths resolve to the same path.",
    "gnome_module.gdbus_codegen" : "Compiles the given XML schema into gdbus source code. Takes two positional arguments, the first one specifies the base name to use while creating the output source and header and the second specifies one XML file.",
    "build_target<main_class>" : "Main class for running the built jar",
    "install_data<install_mode>" : "Specify the file mode in symbolic format and optionally the owner\/uid and group\/gid for the installed files.",
    "gnome_module.genmarshal" : "Generates a marshal file using the `glib-genmarshal` tool. The first argument is the basename of the output files.",
    "compiler.find_library<header_dependencies>" : "When the `has_headers` kwarg is also used, this argument is passed to `compiler.has_header()` as dependencies.",
    "compiler.check_header<prefix>" : "Used to add `#include`s and other things that are required for the symbol to be declared. Since 1.0.0 an array is accepted too. When an array is passed, the items are concatenated together separated by a newline.",
    "shared_module<d_module_versions>" : "List of module version identifiers set when compiling D sources.",
    "static_library<fortran_args>" : "Compiler flags for Fortran",
    "build_target<install_mode>" : "Specify the file mode in symbolic format and optionally the owner\/uid and group\/gid for the installed files.",
    "add_global_arguments<language>" : "Specifies the language(s) that the arguments should be",
    "find_program" : "Find an external program in `PATH` etc.",
    "add_project_dependencies" : "Adds arguments to the compiler and linker command line, so that the given set of dependencies is included in all build products for this project.",
    "install_subdir" : "Installs the entire given subdirectory and its contents from the source tree to the location specified by the keyword argument `install_dir`.",
    "shared_library<d_module_versions>" : "List of module version identifiers set when compiling D sources.",
    "executable<rust_crate_type>" : "Set the specific type of rust crate to compile (when compiling rust).",
    "build_target<sources>" : "Additional source files. Same as the source varargs.",
    "both_libraries<win_subsystem>" : "Specifies the subsystem type to use on the Windows platform. Typical values include console for text mode programs and windows for gui apps. The value can also contain version specification such as windows,6.0",
    "shared_module<build_by_default>" : "Causes, when set to true, to have this target be built by default. This means it will be built when meson compile is called without any arguments. The default value is true for all built target types.",
    "compiler.check_header<include_directories>" : "Extra directories for header searches.",
    "add_test_setup" : "Add a custom test setup. This setup can be used to run the tests with a custom setup, for example under Valgrind.",
    "declare_dependency" : "This function returns a `dep` object that behaves like the return value of `dependency()` but is internal to the current build. The main use case for this is in subprojects. This allows a subproject to easily specify how it should be used. This makes it interchangeable with the same dependency that is provided externally by the system.",
    "shared_library<d_args>" : "Compiler flags for D",
    "python3_module.find_python" : "This is a cross platform way of finding the Python 3 executable, which may have a different name on different operating systems. Returns an `external_program` object.",
    "jar<native>" : "Controls whether the target is compiled for the build or host machines.",
    "shared_module<masm_args>" : "Compiler flags for MASM",
    "meson.is_subproject" : "Returns true if the current project is being built as a subproject of some other project and false otherwise.",
    "wayland_module.scan_xml" : "Generate C code based on the given XML file",
    "shared_module<java_args>" : "Compiler flags for Java",
    "windows_module.generate" : "Compiles Windows `rc` files",
    "executable<d_module_versions>" : "List of module version identifiers set when compiling D sources.",
    "static_library<gnu_symbol_visibility>" : "Specifies how symbols should be exported: default\/internal\/hidden\/protected\/inlineshidden",
    "build_target<java_args>" : "Compiler flags for Java",
    "library<install_tag>" : "A string used by the `meson install --tags` command to install only a subset of the files. By default all build targets have the tag runtime except for static libraries that have the devel tag.",
    "executable<name_prefix>" : "The string that will be used as the prefix for the target output filename by overriding the default (only used for libraries). By default this is lib on all platforms and compilers, except for MSVC shared libraries where it is omitted to follow convention, and Cygwin shared libraries where it is cyg.",
    "list.contains" : "Returns true if the array contains the object given as argument, false otherwise",
    "custom_target" : "Create a custom top level build target",
    "compiler.compute_int<prefix>" : "Used to add `#include`s and other things that are required for the symbol to be declared. Since 1.0.0 an array is accepted too. When an array is passed, the items are concatenated together separated by a newline.",
    "python_installation.get_install_dir" : "Retrieve the directory `install_sources()` will install to.",
    "subproject" : "Takes the project specified in the positional argument and brings that in the current build specification by returning a subproject object.",
    "executable<objects>" : "List of object files that should be linked in this target.",
    "vcs_tag" : "This command detects revision control commit information at build time and places it in the specified output file. This file is guaranteed to be up to date on every build.",
    "str.strip" : "Removes leading\/ending spaces and newlines from the string.",
    "shared_module<cs_args>" : "Compiler flags for C#",
    "gnome_module.gtkdoc" : "Compiles and installs gtkdoc documentation into `prefix\/share\/gtk-doc\/html`. Takes one positional argument: The name of the module.",
    "shared_module<link_args>" : "Flags to use during linking. You can use UNIX-style flags here for all platforms.",
    "assert" : "Abort with an error message if condition evaluates to false.",
    "static_library<link_depends>" : "Strings, files, or custom targets the link step depends on such as a symbol visibility map. The purpose is to automatically trigger a re-link (but not a re-compile) of the target when this file changes.",
    "external_project_module.add_project" : "This function should be called at the root directory of a project using another build system. Usually in a meson.build file placed in the top directory of a subproject, but could be also in any subdir.\n\nIts first positional argument is the name of the configure script to be executed (e.g. configure), that file must be in the current directory and executable. Note that if a bootstrap script is required (e.g. autogen.sh when building from git instead of tarball), it can be done using `run_command()` before calling `add_project()` method.",
    "both_libraries<vala_args>" : "Compiler flags for Vala",
    "python_installation.get_path" : "Get a path as defined by the sysconfig module.",
    "jar<rust_crate_type>" : "Set the specific type of rust crate to compile (when compiling rust).",
    "jar<rust_args>" : "Compiler flags for Rust",
    "build_tgt.extract_objects" : "Returns an opaque value representing the object files generated for those source files. This is typically used to take single object files and link them to unit tests or to compile some source files with custom flags",
    "build_target<install_rpath>" : "A string to set the target's rpath to after install (but not before that). On Windows, this argument has no effect.",
    "declare_dependency<sources>" : "Sources to add to targets (or generated header files that should be built before sources including them are built)",
    "debug" : "Write the argument string to the meson build log.",
    "cmake_module.write_basic_package_version_file<install_dir>" : "Optional installation directory, it defaults to `$(libdir)\/cmake\/$(name)`",
    "both_libraries<extra_files>" : "Not used for the build itself but are shown as source files in IDEs that group files by targets (such as Visual Studio)",
    "shared_module<link_whole>" : "Links all contents of the given static libraries whether they are used by not, equivalent to the -Wl,--whole-archive argument flag of GCC.",
    "executable<override_options>" : "takes an array of strings in the same format as project's `default_options` overriding the values of these options for this target only.",
    "add_project_dependencies<language>" : "Specifies the language(s) that the arguments should be",
    "cmake_subproject.dependency" : "Returns a dependency object for any CMake target",
    "shared_library<install_dir>" : "Override install directory for this file. If the value is a relative path, it will be considered relative the prefix option",
    "configure_file<capture>" : "Capture output of command",
    "generator.process<extra_args>" : "If present, will be used to replace an entry @EXTRA_ARGS@ in the argument list.",
    "test<priority>" : "Specifies the priority of a test. Tests with a higher priority are started before tests with a lower priority. The starting order of tests with identical priorities is implementation-defined. The default priority is 0, negative numbers are permitted.",
    "meson.version" : "Return a string with the version of Meson.",
    "shared_library<java_args>" : "Compiler flags for Java",
    "declare_dependency<include_directories>" : "The directories to add to header search path, must be inc objects or (since 0.50.0) plain strings.",
    "test<suite>" : "Label attached to this test",
    "compiler.compute_int<dependencies>" : "Additionally dependencies required for compiling and \/ or linking.",
    "build_target<vs_module_defs>" : "Specify a Microsoft module definition file for controlling symbol exports, etc., on platforms where that is possible (e.g. Windows).",
    "build_target<objcpp_args>" : "Compiler flags for Objective-C++",
    "generator<capture>" : "When this argument is set to true, Meson captures stdout of the executable and writes it to the target file specified as output.",
    "meson.current_source_dir" : "Returns a string to the current source directory.",
    "both_libraries<gnu_symbol_visibility>" : "Specifies how symbols should be exported: default\/internal\/hidden\/protected\/inlineshidden",
    "executable<vala_args>" : "Compiler flags for Vala",
    "custom_target<build_always_stale>" : "If true the target is always considered out of date. Useful for things such as build timestamps or revision control tags. The associated command is run even if the outputs are up to date.",
    "qt6_module.compile_resources" : "Compiles Qt's resources collection files (.qrc) into c++ files for compilation.",
    "compiler.run" : "Attempts to compile and execute the given code fragment.",
    "shared_library<gui_app>" : "When set to true flags this target as a GUI application on platforms where this makes a differerence, deprecated since 0.56.0, use win_subsystem instead.",
    "build_target<link_args>" : "Flags to use during linking. You can use UNIX-style flags here for all platforms.",
    "qt6_module.has_tools" : "This method returns true if all tools used by this module are found, false otherwise. It should be used to compile optional Qt code",
    "import" : "Imports the given extension module.",
    "executable<install_tag>" : "A string used by the `meson install --tags` command to install only a subset of the files. By default all build targets have the tag runtime except for static libraries that have the devel tag.",
    "project<meson_version>" : "Takes a string describing which Meson version the project requires. Usually something like `>=0.28.0`.",
    "build_target<link_with>" : "One or more shared or static libraries (built by this project) that this target should be linked with. (since 0.41.0) If passed a list this list will be flattened. (since 0.51.0) The arguments can also be custom targets. In this case Meson will assume that merely adding the output file in the linker command line is sufficient to make linking work. If this is not sufficient, then the build system writer must write all other steps manually.",
    "set_variable" : "Assigns a value to the given variable name. Calling set_variable('foo', bar) is equivalent to foo = bar.",
    "library<include_directories>" : "One or more objects created with the include_directories() function, or (since 0.50.0) strings, which will be transparently expanded to include directory objects",
    "fs_module.is_dir" : "Takes a single string argument and returns true if a directory with that name exists on the file system.",
    "dict.get" : "Returns the value for the key given as first argument if it is present in the dictionary, or the optional fallback value given as the second argument. If a single argument was given and the key was not found, causes a fatal error",
    "compiler.check_header<no_builtin_args>" : "When set to true, the compiler arguments controlled by built-in configuration options are not added.",
    "compiler.get_id" : "Returns a string identifying the compiler.",
    "build_target<soversion>" : "A string or integer specifying the soversion of this shared library, such as 0. On Linux and Windows this is used to set the soversion (or equivalent) in the filename. For example, if soversion is 4, a Windows DLL will be called foo-4.dll and one of the aliases of the Linux shared library would be libfoo.so.4. If this is not specified, the first part of version is used instead (see below). For example, if version is 3.6.0 and soversion is not defined, it is set to 3.",
    "compiler.sizeof<no_builtin_args>" : "When set to true, the compiler arguments controlled by built-in configuration options are not added.",
    "executable<cython_args>" : "Compiler flags for Cython",
    "dep.as_system" : "Returns a copy of the dependency object, which has changed the value of `include_type` to `value`.",
    "library<cpp_pch>" : "Precompiled header file to use for C++",
    "meson.has_external_property" : "Checks whether the given property exist in a native or cross file.",
    "build_target<masm_args>" : "Compiler flags for MASM",
    "jar<main_class>" : "Main class for running the built jar",
    "int.is_even" : "Returns true if the number is even.",
    "str.substring" : "Returns a substring specified from `start` to `end`. The method accepts negative values.",
    "str.to_int" : "Converts the string to an int and throws an error if it can't be",
    "compiler.has_header_symbol<prefix>" : "Used to add `#include`s and other things that are required for the symbol to be declared. Since 1.0.0 an array is accepted too. When an array is passed, the items are concatenated together separated by a newline.",
    "build_target<d_import_dirs>" : "List of directories to look in for string imports used in the D programming language.",
    "environment<separator>" : "The separator to use for the initial values defined in the first positional argument. If not explicitly specified, the default path separator for the host operating system will be used, i.e. ';' for Windows and ':' for UNIX\/POSIX systems.",
    "library<extra_files>" : "Not used for the build itself but are shown as source files in IDEs that group files by targets (such as Visual Studio)",
    "shared_module<d_args>" : "Compiler flags for D",
    "jar<build_rpath>" : "A string to add to target's rpath definition in the build dir, but which will be removed on install",
    "library<build_by_default>" : "Causes, when set to true, to have this target be built by default. This means it will be built when meson compile is called without any arguments. The default value is true for all built target types.",
    "shared_library<native>" : "Controls whether the target is compiled for the build or host machines.",
    "build_tgt.full_path" : "Returns a full path pointing to the result target file. NOTE: In most cases using the object itself will do the same job as this and will also allow Meson to setup inter-target dependencies correctly. Please file a bug if that doesn't work for you.",
    "executable<objcpp_args>" : "Compiler flags for Objective-C++",
    "gnome_module.generate_vapi" : "Creates a VAPI file from gir. The first argument is the name of the library.",
    "cfg_data.set_quoted<description>" : "Message \/ Comment that will be written in the result file. The replacement assumes a file with C syntax. If your generated file is source code in some other language, you probably don't want to add a description field because it most likely will cause a syntax error.",
    "build_target<d_debug>" : "The D version identifiers to add during the compilation of D source files.",
    "dependency<native>" : "If set to true, causes Meson to find the dependency on the build machine system rather than the host system (i.e. where the cross compiled binary will run on), usually only needed if you build a tool to be used during compilation.",
    "dict.has_key" : "Returns true if the dictionary contains the key given as argument, false otherwise.",
    "jar<link_whole>" : "Links all contents of the given static libraries whether they are used by not, equivalent to the -Wl,--whole-archive argument flag of GCC.",
    "add_global_link_arguments<language>" : "Specifies the language(s) that the arguments should be",
    "rust_module.test" : "This function creates a new rust unittest target from an existing rust based target, which may be a library or executable. It does this by copying the sources and arguments passed to the original target and adding the --test argument to the compilation, then creates a new test target which calls that executable, using the rust test protocol.",
    "add_project_arguments<language>" : "Specifies the language(s) that the arguments should be",
    "files" : "This command takes the strings given to it in arguments and returns corresponding File objects that you can use as sources for build targets. The difference is that file objects remember the subdirectory they were defined in and can be used anywhere in the source tree.",
    "library<override_options>" : "takes an array of strings in the same format as project's `default_options` overriding the values of these options for this target only.",
    "add_test_setup<timeout_multiplier>" : "A number to multiply the test timeout with",
    "qt5_module.has_tools" : "This method returns true if all tools used by this module are found, false otherwise. It should be used to compile optional Qt code",
    "executable<link_with>" : "One or more shared or static libraries (built by this project) that this target should be linked with. (since 0.41.0) If passed a list this list will be flattened. (since 0.51.0) The arguments can also be custom targets. In this case Meson will assume that merely adding the output file in the linker command line is sufficient to make linking work. If this is not sufficient, then the build system writer must write all other steps manually.",
    "shared_module<rust_args>" : "Compiler flags for Rust",
    "generator<arguments>" : "A list of template strings that will be the command line arguments passed to the executable.",
    "cmake_subproject.include_directories" : "Returns a meson `inc` object for the specified target. Using this method is not necessary if the dependency object is used.",
    "both_libraries<native>" : "Controls whether the target is compiled for the build or host machines.",
    "add_test_setup<is_default>" : "Set whether this is the default test setup",
    "install_subdir<install_mode>" : "Specify the file mode in symbolic format and optionally the owner\/uid and group\/gid for the installed files.",
    "python_installation.install_sources" : "Install actual python sources (.py)",
    "both_libraries<cpp_pch>" : "Precompiled header file to use for C++",
    "get_option" : "Obtains the value of the project build option specified in the positional argument.",
    "compiler.has_members<no_builtin_args>" : "When set to true, the compiler arguments controlled by built-in configuration options are not added.",
    "str.to_upper" : "Converts all characters to upper case",
    "declare_dependency<objects>" : "A list of object files, to be linked directly into the targets that use the dependency.",
    "shared_library<extra_files>" : "Not used for the build itself but are shown as source files in IDEs that group files by targets (such as Visual Studio)",
    "gnome_module.generate_gir" : "Generates GObject introspection data.",
    "build_target<extra_files>" : "Not used for the build itself but are shown as source files in IDEs that group files by targets (such as Visual Studio)",
    "compiler.run<include_directories>" : "Extra directories for header searches.",
    "build_target<build_rpath>" : "A string to add to target's rpath definition in the build dir, but which will be removed on install",
    "import<required>" : "When set to false, Meson will proceed with the build even if the module is not found. When set to a feature option, the feature will control if it is searched and whether to fail if not found.",
    "qt6_module.compile_moc" : "Compiles Qt's moc files (.moc) into header and\/or source files.",
    "sourceset.apply" : "Match the source set against a dictionary or a `configuration_data` object and return a source configuration object. A source configuration object allows you to retrieve the sources and dependencies for a specific configuration.",
    "compiler.has_header_symbol<required>" : "When set to true, Meson will halt if the header check fails. When set to a feature option, the feature will control if it is searched and whether to fail if not found.",
    "cmake_module.subproject_options" : "Use this method to obtain a `subproject_options` object that allows to configure a CMake subproject",
    "cfg_data.merge_from" : "Takes as argument a different configuration data object and copies all entries from that object to the current.",
    "install_headers" : "Installs the specified header files from the source tree into the system header directory.",
    "generator.process" : "Takes a list of files, causes them to be processed and returns an object containing the result which can then, for example, be passed into a build target definition.",
    "python_installation.extension_module" : "Create a `shared_module()` target that is named according to the naming conventions of the target platform.",
    "jar<build_by_default>" : "Causes, when set to true, to have this target be built by default. This means it will be built when meson compile is called without any arguments. The default value is true for all built target types.",
    "dependency<not_found_message>" : "An optional string that will be printed as a message() if the dependency was not found.",
    "cfg_data.get_unquoted" : "Returns the value of varname but without surrounding double quotes (\"). If the value has not been set returns default_value if it is defined and errors out if not.",
    "library<c_pch>" : "Precompiled header file to use for C",
    "executable<export_dynamic>" : "when set to true causes the target's symbols to be dynamically exported, allowing modules built using the `shared_module()` function to refer to functions, variables and other symbols defined in the executable itself. Implies the implib argument.",
    "jar<name_prefix>" : "The string that will be used as the prefix for the target output filename by overriding the default (only used for libraries). By default this is lib on all platforms and compilers, except for MSVC shared libraries where it is omitted to follow convention, and Cygwin shared libraries where it is cyg.",
    "compiler.has_member<prefix>" : "Used to add `#include`s and other things that are required for the symbol to be declared. Since 1.0.0 an array is accepted too. When an array is passed, the items are concatenated together separated by a newline.",
    "dep.found" : "Returns whether the dependency was found.",
    "compiler.has_type" : "Returns true if the specified token is a type.",
    "run_command<check>" : "If true, the exit status code of the command will be checked, and the configuration will fail if it is non-zero. Note that the default value will be true in future releases.",
    "cuda_module.nvcc_arch_flags" : "Returns a list of `-gencode` flags that should be passed to `cuda_args:` in order to compile a \"fat binary\" for the architectures\/compute capabilities enumerated in the positional argument(s). The flags shall be acceptable to an NVCC with CUDA Toolkit version string `cuda_version_string`.",
    "install_headers<install_dir>" : "The absolute or relative path to the installation directory. If this is a relative path, it is assumed to be relative to the prefix.",
    "shared_library<install_rpath>" : "A string to set the target's rpath to after install (but not before that). On Windows, this argument has no effect.",
    "library<name_prefix>" : "The string that will be used as the prefix for the target output filename by overriding the default (only used for libraries). By default this is lib on all platforms and compilers, except for MSVC shared libraries where it is omitted to follow convention, and Cygwin shared libraries where it is cyg.",
    "compiler.has_members<args>" : "Used to pass a list of compiler arguments. Defining include paths for headers not in the default include path via -Isome\/path\/to\/header is generally supported, however, usually not recommended.",
    "compiler.has_function" : "Returns true if the given function is provided by the standard library or a library passed in with the args keyword.",
    "declare_dependency<link_whole>" : "Libraries to link fully, same as executable().",
    "fs_module.size" : "Returns the size of the file in bytes",
    "jar<objects>" : "List of object files that should be linked in this target.",
    "jar<install_rpath>" : "A string to set the target's rpath to after install (but not before that). On Windows, this argument has no effect.",
    "both_libraries" : "Builds both a static and shared library with the given sources",
    "both_libraries<d_args>" : "Compiler flags for D",
    "executable<implib>" : "When set to true, an import library is generated for the executable (the name of the import library is based on exe_name). Alternatively, when set to a string, that gives the base name for the import library. The import library is used when the returned build target object appears in link_with: elsewhere. Only has any effect on platforms where that is meaningful (e.g. Windows). Implies the export_dynamic argument.",
    "shared_library<install_tag>" : "A string used by the `meson install --tags` command to install only a subset of the files. By default all build targets have the tag runtime except for static libraries that have the devel tag.",
    "library<name_suffix>" : "The string that will be used as the extension for the target by overriding the default. By default on Windows this is exe for executables and on other platforms it is omitted.",
    "dep.get_variable" : "A generic variable getter method, which replaces the `get_*type*_variable` methods. This allows one to get the variable from a dependency without knowing specifically how that dependency was found. If `default_value` is set and the value cannot be gotten from the object then `default_value` is returned, if it is not set then an error is raised.",
    "library<objc_args>" : "Compiler flags for Objective-C",
    "cmake_module.subproject" : "The subproject method is almost identical to the normal Meson subproject() function. The only difference is that a CMake project instead of a Meson project is configured.",
    "jar<cython_args>" : "Compiler flags for Cython",
    "cfg_data.set10<description>" : "Message \/ Comment that will be written in the result file. The replacement assumes a file with C syntax. If your generated file is source code in some other language, you probably don't want to add a description field because it most likely will cause a syntax error.",
    "qt5_module.preprocess" : "Takes sources for moc, uic, and rcc, and converts them into c++ files for compilation.",
    "module.found" : "Returns true if the module was successfully imported, otherwise false.",
    "compiler.find_library<header_prefix>" : "When the `has_headers` kwarg is also used, this argument is passed to `compiler.has_header()` as prefix.",
    "both_libraries<name_prefix>" : "The string that will be used as the prefix for the target output filename by overriding the default (only used for libraries). By default this is lib on all platforms and compilers, except for MSVC shared libraries where it is omitted to follow convention, and Cygwin shared libraries where it is cyg.",
    "compiler.has_header" : "Returns true if the specified header exists with the specified prefix, dependencies, and arguments.",
    "jar<d_debug>" : "The D version identifiers to add during the compilation of D source files."
  }
}
)=====";
