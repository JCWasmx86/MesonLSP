@add_global_arguments:
Adds global arguments to the compiler command line.
@add_global_link_arguments:
Adds global arguments to the linker command line.

Like `add_global_arguments()` but the arguments are passed to the linker.
@add_languages:
Add programming languages used by the project.

This is equivalent to having them in the `project` declaration. This function is usually used to add languages that are only used under some conditions.

Returns `true` if all languages specified were found and `false` otherwise.

If native is omitted, the languages may be used for either build or host machine, but are never required for the build machine. (i.e. it is equivalent to `add_languages(*langs*, native: false, required: *required*) and add_languages(*langs*, native: true, required: false)`).
This default behaviour may change to `native: false` in a future Meson version.
@add_project_arguments:
Adds project specific arguments to the compiler command line.

This function behaves in the same way as `add_global_arguments()` except that the arguments are only used for the current project, they won't be used in any other subproject.
@add_project_dependencies:
Adds arguments to the compiler and linker command line, so that the given set of dependencies is included in all build products for this project.
@add_project_link_arguments:
Adds project specific arguments to the linker command line.

Like `add_project_arguments()` but the arguments are passed to the linker.
@add_test_setup:
Add a custom test setup. This setup can be used to run the tests with a custom setup, for example under Valgrind.

To use the test setup, run `meson test --setup=*name*` inside the build dir.

Note that all these options are also available while running the `meson test` script for running tests instead of `ninja test` or `msbuild RUN_TESTS.vcxproj`, etc depending on the backend.
@alias_target:
This function creates a new top-level target. Like all top-level targets, this integrates with the selected backend. For instance, with you can run it as `meson compile target_name`. This is a dummy target that does not execute any command, but ensures that all dependencies are built. Dependencies can be any build target (e.g. return value of `executable()`, `custom_target()`, etc)
@assert:
Abort with an error message if `condition` evaluates to `false`.
@benchmark:
Creates a benchmark item that will be run when the benchmark target is run. The behavior of this function is identical to `test()` except for:

- `benchmark()` has no `is_parallel` keyword because benchmarks are not run in parallel
- `benchmark()` does not automatically add the `MALLOC_PERTURB_` environment variable

Defined tests can be run in a backend-agnostic way by calling `meson test` inside the build dir, or by using backend-specific commands, such as `ninja test` or `msbuild RUN_TESTS.vcxproj`.
@both_libraries:
Builds both a static and shared library with the given sources.
Positional and keyword arguments are otherwise the same as for `library()`. Source files will be compiled only once and object files will be reused to build both shared and static libraries, unless `b_staticpic` user option or `pic` argument are set to false in which case sources will be compiled twice.
@build_target:
Creates a build target whose type can be set dynamically with the `target_type` keyword argument.

`target_type` may be set to one of:

- `executable` (see `executable()`)
- `shared_library` (see `shared_library()`)
- `shared_module` (see `shared_module()`)
- `static_library` (see `static_library()`)
- `both_libraries` (see `both_libraries()`)
- `library` (see `library()`)
- `jar` (see `jar()`)
@configuration_data:
Creates an empty configuration object.
You should add your configuration with the `cfg_data` method calls and finally use it in a call to `configure_file()`.
@configure_file:
This function can run in three modes depending on the keyword arguments passed to it.

- When a `cfg_data` object is passed to the `configuration:` keyword argument, it takes a template file as the `input:` (optional) and produces the `output:` (required) by substituting values from the configuration data as detailed in the [configuration file documentation](https://mesonbuild.com/Configuration.html). A dictionary can be passed instead of a `cfg_data` object.
- When a list of strings is passed to the `command:` keyword argument, it takes any source or configured file as the `input:` and assumes that the `output:` is produced when the specified command is run.
- When the `copy:` keyword argument is set to true, this function will copy the file provided in `input:` to a file in the build directory with the name `output:` in the current directory.
@custom_target:
Create a custom top level build target.

The list of strings passed to the `command` keyword argument accept the following special string substitutions:

- `@INPUT@`: the full path to the input passed to `input`. If more than one input is specified, all of them will be substituted as separate arguments only if the command uses `'@INPUT@'` as a standalone-argument. For instance, this would not work: `command : ['cp', './@INPUT@']`, but this would: `command : ['cp', '@INPUT@']`.
- `@OUTPUT@`: the full path to the output passed to `output`. If more than one outputs are specified, the behavior is the same as `@INPUT@`.
- `@INPUT0@` `@INPUT1@` ...: the full path to the input with the specified array index in `input`
- `@OUTPUT0@` `@OUTPUT1@` ...: the full path to the output with the specified array index in `output`
- `@OUTDIR@`: the full path to the directory where the output(s) must be written
- `@DEPFILE@`: the full path to the dependency file passed to `depfile`
- `@PLAINNAME@`: the input filename, without a path
- `@BASENAME@`: the input filename, with extension removed
- `@PRIVATE_DIR@`: path to a directory where the custom target must store all its intermediate files.
- `@SOURCE_ROOT@`: the path to the root of the source tree. Depending on the backend, this may be an absolute or a relative to current workdir path.
- `@BUILD_ROOT@`: the path to the root of the build tree. Depending on the backend, this may be an absolute or a relative to current workdir path.
- `@CURRENT_SOURCE_DIR@`: this is the directory where the currently processed meson.build is located in. Depending on the backend, this may be an absolute or a relative to current workdir path.
@debug:
Write the argument string to the meson build log.
@declare_dependency:
This function returns a `dep` object that behaves like the return value of `dependency()` but is internal to the current build.
The main use case for this is in subprojects. This allows a subproject to easily specify how it should be used. This makes it interchangeable with the same dependency that is provided externally by the system.
@dependency:
Finds an external dependency (usually a library installed on your system) with the given name with `pkg-config` and with CMake if pkg-config fails.
Additionally, frameworks (OSX only) and library-specific fallback detection logic are also supported.

More than one name can be provided, they will be tried in order and the first name to be found will be used. The fallback subproject will be used only if none of the names are found on the system.
Once one of the name has been found, all other names are added into the cache so subsequent calls for any of those name will return the same value. This is useful in case a dependency could have different names, such as `png` and `libpng`.
@disabler:
Returns a `disabler` object.
@environment:
Returns an empty `env` object.
@error:
Print the argument string and halts the build process.
@executable:
Creates a new executable. The first argument specifies its name and the remaining positional arguments define the input files to use.
@files:
This command takes the strings given to it in arguments and returns corresponding File objects that you can use as sources for build targets. The difference is that file objects remember the subdirectory they were defined in and can be used anywhere in the source tree.
@find_program:
`program_name` here is a string that can be an executable or script to be searched for in PATH or other places inside the project. The search order is:


1. Program overrides set via `meson.override_find_program()`
2. `[provide]` sections in subproject wrap files, if `wrap_mode` is set to `forcefallback`
3. `[binaries]` section in your machine files
4. Directories provided using the `dirs:` kwarg
5. Project's source tree relative to the current subdir
  1. If you use the return value of `configure_file()`, the current subdir inside the build tree is used instead
7. `PATH` environment variable
8. `[provide]` sections in subproject wrap files, if wrap_mode is set to anything other than `nofallback`

Meson will also autodetect scripts with a shebang line and run them with the executable/interpreter specified in it both on Windows (because the command invocator will reject the command otherwise) and Unixes (if the script file does not have the executable bit set).
Hence, you must not manually add the interpreter while using this script as part of a list of commands. If the "python3" program is requested and it is not found in the system, Meson will return its current interpreter.
@generator:
This function creates a `generator` object that can be used to run custom compilation commands. The only positional argument is the executable to use. It can either be a self-built executable or one returned by find_program.
The template strings passed to all the keyword arguments accept the following special substitutions:

- `@PLAINNAME@`: the complete input file name, e.g., `foo.c` becomes `foo.c` (unchanged).
- `@BASENAME@`: the base of the input filename, e.g., `foo.c.y` becomes `foo.c` (extension is removed).

Each string passed to the `output` keyword argument must be constructed using one or both of these two substitutions.

In addition to the above substitutions, the `arguments` keyword argument also accepts the following:

- `@OUTPUT@`: the full path to the output file.
- `@INPUT@`: the full path to the input file.
- `@DEPFILE@`: the full path to the depfile.
- `@SOURCE_DIR@`: the full path to the root of the source tree.
- `@CURRENT_SOURCE_DIR@`: this is the directory where the currently processed `meson.build` is located.
- `@BUILD_DIR@`: the full path to the root of the build directory where the output will be placed.
@get_option:
Obtains the value of the `project build option` specified in the positional argument.

Note that the value returned for built-in options that end in `dir` such as `bindir` and `libdir` is usually a path relative to (and inside) the `prefix` but you should not rely on that, as it can also be an absolute path in some cases. `install_dir` arguments handle that as expected but if you need an absolute path, e.g. to use in a `define` etc., you should use the path concatenation operator like this: `get_option('prefix') / get_option('localstatedir')`.
Never manually join paths as if they were strings.

For options of type `feature` a feature option object is returned instead of a string.
@get_variable:

This function can be used to dynamically obtain a variable. `res = get_variable(varname, fallback)` takes the value of `varname` (which must be a string) and stores the variable of that name into `res`. If the variable does not exist, the variable `fallback` is stored into `res` instead. If a fallback is not specified, then attempting to read a non-existing variable will cause a fatal error.
@import:
Imports the given extension module. Returns an object that can be used to call the methods of the module.
@include_directories:
Returns an opaque object which contains the directories (relative to the current directory) given in the positional arguments. The result can then be passed to the `include_directories:` keyword argument when building executables or libraries. You can use the returned object in any subdirectory you want, Meson will make the paths work automatically.

Note that this function call itself does not add the directories into the search path, since there is no global search path. For something like that, see `add_project_arguments()`.

See also `implicit_include_directories` parameter of `executable()`, which adds current source and build directories to include path.

Each directory given is converted to two include paths: one that is relative to the source root and one relative to the build root.
@install_data:
Installs files from the source tree that are listed as positional arguments.
@install_emptydir:
Installs a new directory entry to the location specified by the positional argument. If the directory exists and is not empty, the contents are left in place.
@install_headers:
Installs the specified header files from the source tree into the system header directory (usually `/{prefix}/include`) during the install step. This directory can be overridden by specifying it with the `install_dir` keyword argument. If you just want to install into a subdirectory of the system header directory, then use the `subdir` argument. As an example if this has the value `myproj` then the headers would be installed to `/{prefix}/include/myproj`.
@install_man:
Installs the specified man files from the source tree into system's man directory during the install step. This directory can be overridden by specifying it with the `install_dir` keyword argument.
@install_subdir:
Installs the entire given subdirectory and its contents from the source tree to the location specified by the keyword argument `install_dir`.
@install_symlink:
Installs a symbolic link to `pointing_to` target under `install_dir`.
@is_disabler:
Returns `true` if a variable is a `disabler` and `false` otherwise.
@is_variable:
Returns `true` if a variable of the given name exists and `false` otherwise.
@jar:
Build a jar from the specified Java source files. Keyword arguments are the same as `executable()`'s, with the addition of `main_class` which specifies the main class to execute when running the jar with `java -jar file.jar`.
@join_paths:
Joins the given strings into a file system path segment.
For example `join_paths('foo', 'bar')` results in `foo/bar`.
If any one of the individual segments is an absolute path, all segments before it are dropped. That means `join_paths('foo', '/bar')` returns `/bar`.

Using the `/` operator on strings is equivalent to calling `join_paths()`.
@library:
Builds a library that is either static, shared, or both depending on the value of the `default_library` user option.
You should use this instead of `shared_library()`, `static_library()`, or `both_libraries()` most of the time.
This allows you to toggle your entire project (including subprojects) from shared to static with only one option.
This option applies to libraries being built internally within the entire project.
For external dependencies, the default library type preferred is shared. This can be adapted on a per-library basis using the `dependency()` static keyword.

The keyword arguments for this are the same as for `build_target()`.
@message:
This function prints its argument to stdout.
@project:
The first function called in each project, to initialize Meson.

The first argument to this function must be a string defining the name of this project.

The project name can be any string you want; it's not used for anything except descriptive purposes. However, since it is written to, for example, the dependency manifest, it usually makes sense to have it be the same as the project tarball or pkg-config name. So, for example, you would probably want to use the name `libfoobar` instead of `The Foobar Library`.

It may be followed by the list of programming languages that the project uses.

The list of languages is optional.

These languages may be used both for `native: false` (the default) (host machine) targets and for `native: true` (build machine) targets. (since 0.56.0) The build machine compilers for the specified languages are not required.

Supported values for languages are `c`, `cpp` (for C++), `cuda`, `cython`, `d`, `objc`, `objcpp`, `fortran`, `java`, `cs` (for C#), `vala`, and `rust`.
@range:
Return an opaque object that can be only be used in `foreach` statements.

- `start` must be an integer greater than or equal to 0. Defaults to 0.
- `stop` must be an integer greater than or equal to `start`.
- `step` must be an integer greater than or equal to 1. Defaults to 1.

It causes the `foreach` loop to be called with the value from `start` (included) to `stop` (excluded) with an increment of `step` after each loop.
@run_command:
Runs the command specified in positional arguments. `command` can be a string, or the output of `find_program()`, `files()`, or `configure_file()`, or a compiler object.

Returns a `runresult` object containing the result of the invocation.
The command is run from an unspecified directory, and Meson will set three environment variables `MESON_SOURCE_ROOT`, `MESON_BUILD_ROOT`, and `MESON_SUBDIR` that specify the source directory, build directory, and subdirectory the target was defined in, respectively.
@run_target:
This function creates a new top-level target that runs a specified command with the specified arguments. Like all top-level targets, this integrates with the selected backend. For instance, you can run it as `meson compile target_name`. Note that a run target produces no output as far as Meson is concerned. It is only meant for tasks such as running a code formatter or flashing an external device's firmware with a built file.

The command is run from an unspecified directory, and Meson will set three environment variables `MESON_SOURCE_ROOT`, `MESON_BUILD_ROOT`, and `MESON_SUBDIR` that specify the source directory, build directory, and subdirectory the target was defined in, respectively.

The template strings passed to `command` keyword arguments accept the following special substitutions:

- `@SOURCE_ROOT@`: the path to the root of the source tree. Depending on the backend, this may be an absolute or a relative to current workdir path.
- `@BUILD_ROOT@`: the path to the root of the build tree. Depending on the backend, this may be an absolute or a relative to current workdir path.
- `@CURRENT_SOURCE_DIR@` (Since 0.57.1): this is the directory where the currently processed `meson.build` is located in. Depending on the backend, this may be an absolute or a relative to current workdir path.
@set_variable:
Assigns a value to the given variable name. Calling `set_variable('foo', bar)` is equivalent to `foo = bar`.
@shared_library:
Builds a shared library with the given sources.
@shared_module:
Builds a shared module with the given sources.

This is useful for building modules that will be `dlopen()`ed and hence may contain undefined symbols that will be provided by the library that is loading it.

If you want the shared module to be able to refer to functions and variables defined in the `executable()` it is loaded by, you will need to set the `export_dynamic` argument of the `executable` to `true`.
@static_library:
Builds a static library with the given sources.
@structured_sources:
Create a StructuredSource object, which is opaque and may be passed as a source to any build_target (including static_library, shared_library, executable, etc.). This is useful for languages like Rust, which use the filesystem layout to determine import names. This is only allowed in Rust targets, and cannot be mixed with non structured inputs.
@subdir:
Enters the specified subdirectory and executes the `meson.build` file in it. Once that is done, it returns and execution continues on the line following this `subdir()` command. Variables defined in that `meson.build` file are then available for use in later parts of the current build file and in all subsequent build files executed with `subdir()`.

Note that this means that each `meson.build` file in a source tree can and must only be executed once.
@subdir_done:
Stops further interpretation of the Meson script file from the point of the invocation. All steps executed up to this point are valid and will be executed by Meson. This means that all targets defined before the call of `subdir_done()` will be build.

If the current script was called by subdir the execution returns to the calling directory and continues as if the script had reached the end. If the current script is the top level script Meson configures the project as defined up to this point.
@subproject:
Takes the project specified in the positional argument and brings that into the current build specification by returning a subproject object. Subprojects must always be placed inside the `subprojects` directory at the top source directory. So for example, a subproject called `foo` must be located in `${MESON_SOURCE_ROOT}/subprojects/foo`.

- `default_options` (since 0.37.0): an array of default option values that override those set in the subproject's `meson.options` (like `default_options` in `project`, they only have effect when Meson is run for the first time, and command line arguments override any default options in build files). (since 0.54.0): `default_library` built-in option can also be overridden. (since 1.2.0): A dictionary may be passed instead of an array.
- `version`: works just like the same as in `dependency`. It specifies what version the subproject should be, as an example `>=1.0.1`.
- `required` (since 0.48.0): By default, `required` is true and Meson will abort if the subproject could not be set up. You can set this to `false` and then use the `.found()` method on the subproject object. You may also pass the value of a feature option, same as `dependency()`.

Note that you can use the returned subproject object to access any variable in the subproject. However, if you want to use a `dependency` object from inside a subproject, an easier way is to use the `fallback:` keyword argument to `dependency()`.
@summary:
This function is used to summarize build configuration at the end of the build process. It provides a way for projects (and subprojects) to report this information in a clear way.

The content is a series of key/value pairs grouped into sections. If the `section` keyword argument is omitted, those key/value pairs are implicitly grouped into a section with no title. Key/value pairs can optionally be grouped into a dictionary, but keep in mind that dictionaries do not guarantee ordering. `key` must be a string, and `value` can be:

- an integer, boolean, or string
- (since 0.57.0) an external program or a dependency
- (since 0.58.0) a feature option
- a list of those.

Instead of calling `summary` as `summary(key, value)`, it is also possible to directly pass a dictionary to the `summary()` function, as seen in the example below.

`summary()` can be called multiple times as long as the same section/key pair doesn't appear twice. All sections will be collected and printed at the end of the configuration in the same order as they have been called.
@test:
Defines a test to run with the test harness. Takes two positional arguments: the first is the name of the test, and the second is the executable to run. The executable can be an `exe` object returned by `executable()` or an `external_program` object returned by `find_program()`.

(since 0.55.0) When cross-compiling, if an `exe_wrapper` is needed and defined, the environment variable `MESON_EXE_WRAPPER` will be set to the string value of that wrapper (implementation detail: using `mesonlib.join_args`). Test scripts may use this to run cross-built binaries. If your test needs `MESON_EXE_WRAPPER` in cross-build situations, it is your responsibility to return code 77 to tell the harness to report "skip".

By default, the environment variable `MALLOC_PERTURB_` is automatically set by `meson test` to a random value between 1 and 255. This can help find memory leaks on configurations using glibc, including with non-GCC compilers. However, this can have a performance impact and may fail a test due to external libraries whose internals are out of the user's control. To check if this feature is causing an expected runtime crash, disable the feature by temporarily setting the environment variable `MALLOC_PERTURB_=0`. While it's preferable to only temporarily disable this check, if a project requires permanent disabling of this check in `meson.build`, do like:

```meson
nomalloc = environment({'MALLOC_PERTURB_': '0'})
test(..., env: nomalloc, ...)
```
By default, the environment variables `ASAN_OPTIONS` and `UBSAN_OPTIONS` are set to enable aborting on detected violations and to provide a backtrace. To suppress this behavior, you can set `ASAN_OPTIONS` and `UBSAN_OPTIONS` in the environment variables.

In addition to running individual executables as test cases, `test()` can also be used to invoke an external test harness. For this scenario, it is recommended to use `verbose: true` (since 0.62.0) and, if supported by the external harness, `protocol: 'tap'` (since 0.50.0). This setup ensures that Meson logs each subtest as it runs, rather than including the entire log at the end of the run.

Defined tests can be run in a backend-agnostic way by executing `meson test` within the build directory, or by using backend-specific commands such as `ninja test` or `msbuild RUN_TESTS.vcxproj`.
@unset_variable:
Unsets a variable. Referencing a variable which has been unset is an error until it has been set again.
@vcs_tag:
This command detects revision control commit information at build time and places it in the specified output file. The generated file is ensured to be up to date with every build. Keywords are similar to `custom_target()`.

Meson will read the contents of `input`, substitute the `replace_string` with the detected revision number, and write the result to `output`. This method returns a `custom_tgt` object that, as usual, should be used to signal dependencies if other targets use the file outputted by this.

For instance, if you generate a header with this command and intend to use it in a build target, you must add the return value to the sources of that build target. This is crucial for Meson to determine the order in which to build the targets.

If you require more specific behavior than what this command provides, it is recommended to use `custom_target()`.
@warning:
This function prints its argument to stdout prefixed with WARNING:.
